
hello-stmdiscovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007514  08007514  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c84  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d80  20001d80  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109df  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cdf  00000000  00000000  00030b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c08  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e65  00000000  00000000  00035148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f71  00000000  00000000  00058fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd582  00000000  00000000  00069f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001374a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035cc  00000000  00000000  001374f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007438 	.word	0x08007438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08007438 	.word	0x08007438

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b09a      	sub	sp, #104	; 0x68
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fb4d 	bl	8000b80 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t testDataBuffer[100] = "Input 1 or 0 to turn an LED on or off, respectively\r\n";
 80004e6:	4b23      	ldr	r3, [pc, #140]	; (8000574 <main+0x98>)
 80004e8:	1d3c      	adds	r4, r7, #4
 80004ea:	461d      	mov	r5, r3
 80004ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004fc:	6020      	str	r0, [r4, #0]
 80004fe:	3404      	adds	r4, #4
 8000500:	8021      	strh	r1, [r4, #0]
 8000502:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000506:	222e      	movs	r2, #46	; 0x2e
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 ff8c 	bl	8007428 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f834 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8d2 	bl	80006bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000518:	f000 f89a 	bl	8000650 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800051c:	f006 fa32 	bl	8006984 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  volatile uint8_t firstPatternCount = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	70fb      	strb	r3, [r7, #3]
  // Need to enable EXTI0_IRQn for catching interrupts along EXTI0 line
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0x0F, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	210f      	movs	r1, #15
 8000528:	2006      	movs	r0, #6
 800052a:	f000 fc9a 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800052e:	2006      	movs	r0, #6
 8000530:	f000 fcb3 	bl	8000e9a <HAL_NVIC_EnableIRQ>

  USB_VCP_IntroMSG(testDataBuffer);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fa06 	bl	8000948 <USB_VCP_IntroMSG>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (firstPatternCount < 16) {
 800053c:	e00d      	b.n	800055a <main+0x7e>
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0x9c>)
 8000544:	f000 fe79 	bl	800123a <HAL_GPIO_TogglePin>

    	HAL_Delay(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054c:	f000 fb8a 	bl	8000c64 <HAL_Delay>

    	firstPatternCount += 1;
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3301      	adds	r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	70fb      	strb	r3, [r7, #3]
    while (firstPatternCount < 16) {
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b0f      	cmp	r3, #15
 8000560:	d9ed      	bls.n	800053e <main+0x62>
    }

    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x9c>)
 8000568:	f000 fe67 	bl	800123a <HAL_GPIO_TogglePin>

    firstPatternCount = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	70fb      	strb	r3, [r7, #3]
    while (firstPatternCount < 16) {
 8000570:	e7f3      	b.n	800055a <main+0x7e>
 8000572:	bf00      	nop
 8000574:	08007450 	.word	0x08007450
 8000578:	40020c00 	.word	0x40020c00

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 ff4c 	bl	8007428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f8b0 	bl	8002768 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060e:	f000 f9d1 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2105      	movs	r1, #5
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fb11 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800063c:	f000 f9ba 	bl	80009b4 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <MX_SPI1_Init+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI1_Init+0x64>)
 800065c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI1_Init+0x64>)
 800069c:	220a      	movs	r2, #10
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_SPI1_Init+0x64>)
 80006a2:	f002 fcd1 	bl	8003048 <HAL_SPI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f982 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000118 	.word	0x20000118
 80006b8:	40013000 	.word	0x40013000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <MX_GPIO_Init+0x248>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a8a      	ldr	r2, [pc, #552]	; (8000904 <MX_GPIO_Init+0x248>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b88      	ldr	r3, [pc, #544]	; (8000904 <MX_GPIO_Init+0x248>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	4b84      	ldr	r3, [pc, #528]	; (8000904 <MX_GPIO_Init+0x248>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a83      	ldr	r2, [pc, #524]	; (8000904 <MX_GPIO_Init+0x248>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b81      	ldr	r3, [pc, #516]	; (8000904 <MX_GPIO_Init+0x248>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b7d      	ldr	r3, [pc, #500]	; (8000904 <MX_GPIO_Init+0x248>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a7c      	ldr	r2, [pc, #496]	; (8000904 <MX_GPIO_Init+0x248>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b7a      	ldr	r3, [pc, #488]	; (8000904 <MX_GPIO_Init+0x248>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b76      	ldr	r3, [pc, #472]	; (8000904 <MX_GPIO_Init+0x248>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a75      	ldr	r2, [pc, #468]	; (8000904 <MX_GPIO_Init+0x248>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b73      	ldr	r3, [pc, #460]	; (8000904 <MX_GPIO_Init+0x248>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b6f      	ldr	r3, [pc, #444]	; (8000904 <MX_GPIO_Init+0x248>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a6e      	ldr	r2, [pc, #440]	; (8000904 <MX_GPIO_Init+0x248>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b6c      	ldr	r3, [pc, #432]	; (8000904 <MX_GPIO_Init+0x248>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <MX_GPIO_Init+0x248>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a67      	ldr	r2, [pc, #412]	; (8000904 <MX_GPIO_Init+0x248>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b65      	ldr	r3, [pc, #404]	; (8000904 <MX_GPIO_Init+0x248>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2108      	movs	r1, #8
 800077e:	4862      	ldr	r0, [pc, #392]	; (8000908 <MX_GPIO_Init+0x24c>)
 8000780:	f000 fd42 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	4860      	ldr	r0, [pc, #384]	; (800090c <MX_GPIO_Init+0x250>)
 800078a:	f000 fd3d 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800078e:	2200      	movs	r2, #0
 8000790:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000794:	485e      	ldr	r0, [pc, #376]	; (8000910 <MX_GPIO_Init+0x254>)
 8000796:	f000 fd37 	bl	8001208 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800079a:	2308      	movs	r3, #8
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4855      	ldr	r0, [pc, #340]	; (8000908 <MX_GPIO_Init+0x24c>)
 80007b2:	f000 fb8d 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	484f      	ldr	r0, [pc, #316]	; (800090c <MX_GPIO_Init+0x250>)
 80007ce:	f000 fb7f 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e2:	2305      	movs	r3, #5
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4847      	ldr	r0, [pc, #284]	; (800090c <MX_GPIO_Init+0x250>)
 80007ee:	f000 fb6f 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <MX_GPIO_Init+0x258>)
 8000808:	f000 fb62 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800080c:	2310      	movs	r3, #16
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800081c:	2306      	movs	r3, #6
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	483b      	ldr	r0, [pc, #236]	; (8000914 <MX_GPIO_Init+0x258>)
 8000828:	f000 fb52 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800082c:	2304      	movs	r3, #4
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x25c>)
 8000840:	f000 fb46 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x25c>)
 8000862:	f000 fb35 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	f24f 0310 	movw	r3, #61456	; 0xf010
 800086a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4824      	ldr	r0, [pc, #144]	; (8000910 <MX_GPIO_Init+0x254>)
 8000880:	f000 fb26 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin PC10 I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|GPIO_PIN_10|I2S3_SD_Pin;
 8000884:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000896:	2306      	movs	r3, #6
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <MX_GPIO_Init+0x250>)
 80008a2:	f000 fb15 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008a6:	2320      	movs	r3, #32
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <MX_GPIO_Init+0x254>)
 80008ba:	f000 fb09 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d0:	2304      	movs	r3, #4
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	480f      	ldr	r0, [pc, #60]	; (8000918 <MX_GPIO_Init+0x25c>)
 80008dc:	f000 faf8 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x24c>)
 80008f6:	f000 faeb 	bl	8000ed0 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40021000 	.word	0x40021000
 800090c:	40020800 	.word	0x40020800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400

0800091c <EXTI0_IRQHandler>:
/* USER CODE BEGIN 4 */
/*
 * Handles interrupts on EXTI0 line, associated with user push button.
 * If interrupt detected (button press), toggles blue LED (LD6)
 */
void EXTI0_IRQHandler(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(User_Button_Pin) != RESET) {
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <EXTI0_IRQHandler+0x24>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d007      	beq.n	800093c <EXTI0_IRQHandler+0x20>
		__HAL_GPIO_EXTI_CLEAR_IT(User_Button_Pin);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <EXTI0_IRQHandler+0x24>)
 800092e:	2201      	movs	r2, #1
 8000930:	615a      	str	r2, [r3, #20]
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <EXTI0_IRQHandler+0x28>)
 8000938:	f000 fc7f 	bl	800123a <HAL_GPIO_TogglePin>
	}
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40013c00 	.word	0x40013c00
 8000944:	40020c00 	.word	0x40020c00

08000948 <USB_VCP_IntroMSG>:

void USB_VCP_IntroMSG(uint8_t dataBuffer[]) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f000 f986 	bl	8000c64 <HAL_Delay>
	CDC_Transmit_FS(dataBuffer, strlen((char *)dataBuffer));
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc35 	bl	80001c8 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29b      	uxth	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f006 f8d1 	bl	8006b0c <CDC_Transmit_FS>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <CDC_HandleReceive>:

void CDC_HandleReceive(uint8_t *buffer, uint32_t len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	if (buffer[0] == '1') {
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b31      	cmp	r3, #49	; 0x31
 8000984:	d106      	bne.n	8000994 <CDC_HandleReceive+0x20>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <CDC_HandleReceive+0x3c>)
 800098e:	f000 fc3b 	bl	8001208 <HAL_GPIO_WritePin>
	} else if (buffer[0] == '0') {
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
	}
}
 8000992:	e009      	b.n	80009a8 <CDC_HandleReceive+0x34>
	} else if (buffer[0] == '0') {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b30      	cmp	r3, #48	; 0x30
 800099a:	d105      	bne.n	80009a8 <CDC_HandleReceive+0x34>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <CDC_HandleReceive+0x3c>)
 80009a4:	f000 fc30 	bl	8001208 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fa24 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_SPI_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a6a:	23e0      	movs	r3, #224	; 0xe0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a86:	f000 fa23 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f89a 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <OTG_FS_IRQHandler+0x10>)
 8000afa:	f000 fd08 	bl	800150e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20001654 	.word	0x20001654

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f006 fc41 	bl	80073e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fcbd 	bl	80004dc <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000b70:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 8000b74:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000b78:	20001d80 	.word	0x20001d80

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f94f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff ff04 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f967 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f92f 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000170 	.word	0x20000170

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000170 	.word	0x20000170

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff ffee 	bl	8000c4c <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffde 	bl	8000c4c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff29 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff3e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e16b      	b.n	80011c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 815a 	bne.w	80011be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d005      	beq.n	8000f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80b4 	beq.w	80011be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b60      	ldr	r3, [pc, #384]	; (80011dc <HAL_GPIO_Init+0x30c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a5f      	ldr	r2, [pc, #380]	; (80011dc <HAL_GPIO_Init+0x30c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <HAL_GPIO_Init+0x30c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a5b      	ldr	r2, [pc, #364]	; (80011e0 <HAL_GPIO_Init+0x310>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_GPIO_Init+0x314>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d02b      	beq.n	80010f6 <HAL_GPIO_Init+0x226>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <HAL_GPIO_Init+0x318>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x222>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a50      	ldr	r2, [pc, #320]	; (80011ec <HAL_GPIO_Init+0x31c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x21e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_GPIO_Init+0x320>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x324>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x216>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x328>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x212>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x32c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x20e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x330>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x20a>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00e      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010da:	2308      	movs	r3, #8
 80010dc:	e00c      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00a      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <HAL_GPIO_Init+0x310>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <HAL_GPIO_Init+0x334>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_GPIO_Init+0x334>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_GPIO_Init+0x334>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_GPIO_Init+0x334>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f ae90 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021800 	.word	0x40021800
 8001200:	40021c00 	.word	0x40021c00
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	041a      	lsls	r2, r3, #16
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43d9      	mvns	r1, r3
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	400b      	ands	r3, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800126e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001270:	b08f      	sub	sp, #60	; 0x3c
 8001272:	af0a      	add	r7, sp, #40	; 0x28
 8001274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e10f      	b.n	80014a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f005 fd7e 	bl	8006d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2203      	movs	r2, #3
 80012a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 f85f 	bl	8003382 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	687e      	ldr	r6, [r7, #4]
 80012cc:	466d      	mov	r5, sp
 80012ce:	f106 0410 	add.w	r4, r6, #16
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012de:	e885 0003 	stmia.w	r5, {r0, r1}
 80012e2:	1d33      	adds	r3, r6, #4
 80012e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f001 ff37 	bl	800315a <USB_CoreInit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0d0      	b.n	80014a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f002 f84d 	bl	80033a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e04a      	b.n	80013a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	333d      	adds	r3, #61	; 0x3d
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	333c      	adds	r3, #60	; 0x3c
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	b298      	uxth	r0, r3
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3344      	adds	r3, #68	; 0x44
 800134c:	4602      	mov	r2, r0
 800134e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3340      	adds	r3, #64	; 0x40
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	3348      	adds	r3, #72	; 0x48
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	334c      	adds	r3, #76	; 0x4c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	3354      	adds	r3, #84	; 0x54
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3af      	bcc.n	8001310 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e044      	b.n	8001440 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d3b5      	bcc.n	80013b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	687e      	ldr	r6, [r7, #4]
 8001452:	466d      	mov	r5, sp
 8001454:	f106 0410 	add.w	r4, r6, #16
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001464:	e885 0003 	stmia.w	r5, {r0, r1}
 8001468:	1d33      	adds	r3, r6, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f001 ffe5 	bl	800343c <USB_DevInit>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e00d      	b.n	80014a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f934 	bl	8004706 <USB_DevDisconnect>

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_PCD_Start+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e020      	b.n	8001506 <HAL_PCD_Start+0x5e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d109      	bne.n	80014e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 ff37 	bl	8003360 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 f8e4 	bl	80046c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b08d      	sub	sp, #52	; 0x34
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f9a2 	bl	800486e <USB_GetMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 848a 	bne.w	8001e46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f906 	bl	8004748 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8480 	beq.w	8001e44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f003 f8f3 	bl	8004748 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b02      	cmp	r3, #2
 800156a:	d107      	bne.n	800157c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f002 0202 	and.w	r2, r2, #2
 800157a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 f8e1 	bl	8004748 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b10      	cmp	r3, #16
 800158e:	d161      	bne.n	8001654 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0210 	bic.w	r2, r2, #16
 800159e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 020f 	and.w	r2, r3, #15
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	0c5b      	lsrs	r3, r3, #17
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d124      	bne.n	8001616 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d035      	beq.n	8001644 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	6a38      	ldr	r0, [r7, #32]
 80015ec:	f002 ff18 	bl	8004420 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fc:	441a      	add	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160e:	441a      	add	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	621a      	str	r2, [r3, #32]
 8001614:	e016      	b.n	8001644 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	0c5b      	lsrs	r3, r3, #17
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	2b06      	cmp	r3, #6
 8001620:	d110      	bne.n	8001644 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001628:	2208      	movs	r2, #8
 800162a:	4619      	mov	r1, r3
 800162c:	6a38      	ldr	r0, [r7, #32]
 800162e:	f002 fef7 	bl	8004420 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163e:	441a      	add	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0210 	orr.w	r2, r2, #16
 8001652:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 f875 	bl	8004748 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001668:	f040 80a7 	bne.w	80017ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f87a 	bl	800476e <USB_ReadDevAllOutEpInterrupt>
 800167a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800167c:	e099      	b.n	80017b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 808e 	beq.w	80017a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f89e 	bl	80047d6 <USB_ReadDevOutEPInterrupt>
 800169a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00c      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b2:	461a      	mov	r2, r3
 80016b4:	2301      	movs	r3, #1
 80016b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fec2 	bl	8002444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d6:	461a      	mov	r2, r3
 80016d8:	2308      	movs	r3, #8
 80016da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 ff98 	bl	8002614 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fa:	461a      	mov	r2, r3
 80016fc:	2310      	movs	r3, #16
 80016fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d030      	beq.n	800176c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d109      	bne.n	800172a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001728:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	78db      	ldrb	r3, [r3, #3]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2200      	movs	r2, #0
 800174c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f005 fc35 	bl	8006fc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001766:	461a      	mov	r2, r3
 8001768:	2302      	movs	r3, #2
 800176a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	2320      	movs	r3, #32
 8001786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179e:	461a      	mov	r2, r3
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f47f af62 	bne.w	800167e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 ffc2 	bl	8004748 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017ce:	f040 80db 	bne.w	8001988 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 ffe3 	bl	80047a2 <USB_ReadDevAllInEpInterrupt>
 80017dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017e2:	e0cd      	b.n	8001980 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80c2 	beq.w	8001974 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f809 	bl	8004812 <USB_ReadDevInEPInterrupt>
 8001800:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d057      	beq.n	80018bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	2201      	movs	r2, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800182c:	4013      	ands	r3, r2
 800182e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2301      	movs	r3, #1
 8001840:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d132      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	334c      	adds	r3, #76	; 0x4c
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3348      	adds	r3, #72	; 0x48
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4419      	add	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4403      	add	r3, r0
 800187e:	334c      	adds	r3, #76	; 0x4c
 8001880:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d113      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x3a2>
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	3354      	adds	r3, #84	; 0x54
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018a8:	461a      	mov	r2, r3
 80018aa:	2101      	movs	r1, #1
 80018ac:	f003 f810 	bl	80048d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 faff 	bl	8006eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d2:	461a      	mov	r2, r3
 80018d4:	2308      	movs	r3, #8
 80018d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ee:	461a      	mov	r2, r3
 80018f0:	2310      	movs	r3, #16
 80018f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190a:	461a      	mov	r2, r3
 800190c:	2340      	movs	r3, #64	; 0x40
 800190e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d023      	beq.n	8001962 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800191a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800191c:	6a38      	ldr	r0, [r7, #32]
 800191e:	f001 fef1 	bl	8003704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	3338      	adds	r3, #56	; 0x38
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	3304      	adds	r3, #4
 8001934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f005 fb4c 	bl	8006fe8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195c:	461a      	mov	r2, r3
 800195e:	2302      	movs	r3, #2
 8001960:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800196c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fcdb 	bl	800232a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f af2e 	bne.w	80017e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fedb 	bl	8004748 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800199c:	d122      	bne.n	80019e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d108      	bne.n	80019ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019c4:	2100      	movs	r1, #0
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fec2 	bl	8002750 <HAL_PCDEx_LPM_Callback>
 80019cc:	e002      	b.n	80019d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f005 faea 	bl	8006fa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fead 	bl	8004748 <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f8:	d112      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d102      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f005 faa6 	bl	8006f5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fe8f 	bl	8004748 <USB_ReadInterrupts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	f040 80b7 	bne.w	8001ba6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2110      	movs	r1, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fe56 	bl	8003704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5c:	e046      	b.n	8001aec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a82:	0151      	lsls	r1, r2, #5
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	440a      	add	r2, r1
 8001a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	0151      	lsls	r1, r2, #5
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	440a      	add	r2, r1
 8001abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	3301      	adds	r3, #1
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3b3      	bcc.n	8001a5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b22:	f043 030b 	orr.w	r3, r3, #11
 8001b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b38:	f043 030b 	orr.w	r3, r3, #11
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	e015      	b.n	8001b6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b66:	f043 030b 	orr.w	r3, r3, #11
 8001b6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b90:	461a      	mov	r2, r3
 8001b92:	f002 fe9d 	bl	80048d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fdcc 	bl	8004748 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bba:	d124      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 fe62 	bl	800488a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fe17 	bl	80037fe <USB_GetDevSpeed>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681c      	ldr	r4, [r3, #0]
 8001bdc:	f001 fa28 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8001be0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4620      	mov	r0, r4
 8001bec:	f001 fb16 	bl	800321c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f005 f98a 	bl	8006f0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fd9c 	bl	8004748 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d10a      	bne.n	8001c30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f005 f967 	bl	8006eee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f002 0208 	and.w	r2, r2, #8
 8001c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fd87 	bl	8004748 <USB_ReadInterrupts>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d122      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c50:	2301      	movs	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	e014      	b.n	8001c80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fb27 	bl	80022c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3e5      	bcc.n	8001c56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fd5a 	bl	8004748 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c9e:	d13b      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e02b      	b.n	8001cfe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3340      	adds	r3, #64	; 0x40
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da12      	bge.n	8001cf8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	333f      	adds	r3, #63	; 0x3f
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fae8 	bl	80022c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d3ce      	bcc.n	8001ca6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fd13 	bl	8004748 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d2c:	d155      	bne.n	8001dda <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	e045      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d12e      	bne.n	8001dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da2b      	bge.n	8001dba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d121      	bne.n	8001dba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db6:	6053      	str	r3, [r2, #4]
            break;
 8001db8:	e007      	b.n	8001dca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3b4      	bcc.n	8001d34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fcb2 	bl	8004748 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d10a      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f005 f90b 	bl	800700c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fc9c 	bl	8004748 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d115      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f005 f8fb 	bl	8007028 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e000      	b.n	8001e46 <HAL_PCD_IRQHandler+0x938>
      return;
 8001e44:	bf00      	nop
    }
  }
}
 8001e46:	3734      	adds	r7, #52	; 0x34
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_SetAddress+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e013      	b.n	8001e8e <HAL_PCD_SetAddress+0x42>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fbfa 	bl	8004678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	803b      	strh	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0f      	bge.n	8001edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3338      	adds	r3, #56	; 0x38
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00f      	b.n	8001efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f08:	883a      	ldrh	r2, [r7, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f26:	78bb      	ldrb	r3, [r7, #2]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Open+0xaa>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Open+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fc7a 	bl	8003848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0f      	bge.n	8001f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
 8001f98:	e00f      	b.n	8001fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_Close+0x6e>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e00e      	b.n	8001ff2 <HAL_PCD_EP_Close+0x8c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fcb8 	bl	8003958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	b2da      	uxtb	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6979      	ldr	r1, [r7, #20]
 800206e:	f001 ff97 	bl	8003fa0 <USB_EP0StartXfer>
 8002072:	e008      	b.n	8002086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	6979      	ldr	r1, [r7, #20]
 8002082:	f001 fd45 	bl	8003b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3338      	adds	r3, #56	; 0x38
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6979      	ldr	r1, [r7, #20]
 8002132:	f001 ff35 	bl	8003fa0 <USB_EP0StartXfer>
 8002136:	e008      	b.n	800214a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	f001 fce3 	bl	8003b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d901      	bls.n	8002172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e050      	b.n	8002214 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	da0f      	bge.n	800219a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3338      	adds	r3, #56	; 0x38
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	705a      	strb	r2, [r3, #1]
 8002198:	e00d      	b.n	80021b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_EP_SetStall+0x82>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e01e      	b.n	8002214 <HAL_PCD_EP_SetStall+0xc0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 f973 	bl	80044d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	b2d9      	uxtb	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002204:	461a      	mov	r2, r3
 8002206:	f002 fb63 	bl	80048d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d901      	bls.n	800223a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e042      	b.n	80022c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800223a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0f      	bge.n	8002262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	3338      	adds	r3, #56	; 0x38
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	705a      	strb	r2, [r3, #1]
 8002260:	e00f      	b.n	8002282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_PCD_EP_ClrStall+0x86>
 800229e:	2302      	movs	r3, #2
 80022a0:	e00e      	b.n	80022c0 <HAL_PCD_EP_ClrStall+0xa4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 f97b 	bl	80045ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da0c      	bge.n	80022f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3338      	adds	r3, #56	; 0x38
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00c      	b.n	8002310 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	4618      	mov	r0, r3
 8002318:	f001 ff9a 	bl	8004250 <USB_EPStopXfer>
 800231c:	4603      	mov	r3, r0
 800231e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002320:	7afb      	ldrb	r3, [r7, #11]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b08a      	sub	sp, #40	; 0x28
 800232e:	af02      	add	r7, sp, #8
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	3338      	adds	r3, #56	; 0x38
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	429a      	cmp	r2, r3
 800235c:	d901      	bls.n	8002362 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06c      	b.n	800243c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	429a      	cmp	r2, r3
 8002376:	d902      	bls.n	800237e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3303      	adds	r3, #3
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002386:	e02b      	b.n	80023e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	429a      	cmp	r2, r3
 800239c:	d902      	bls.n	80023a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3303      	adds	r3, #3
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6919      	ldr	r1, [r3, #16]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4603      	mov	r3, r0
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f001 ffee 	bl	80043a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	441a      	add	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d809      	bhi.n	800240a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023fe:	429a      	cmp	r2, r3
 8002400:	d203      	bcs.n	800240a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1be      	bne.n	8002388 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	429a      	cmp	r2, r3
 8002414:	d811      	bhi.n	800243a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	43db      	mvns	r3, r3
 8002430:	6939      	ldr	r1, [r7, #16]
 8002432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002436:	4013      	ands	r3, r2
 8002438:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	333c      	adds	r3, #60	; 0x3c
 800245c:	3304      	adds	r3, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d17b      	bne.n	8002572 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4a61      	ldr	r2, [pc, #388]	; (800260c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f240 80b9 	bls.w	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b3 	beq.w	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ac:	6093      	str	r3, [r2, #8]
 80024ae:	e0a7      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2320      	movs	r3, #32
 80024ca:	6093      	str	r3, [r2, #8]
 80024cc:	e098      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 8093 	bne.w	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4a4b      	ldr	r2, [pc, #300]	; (800260c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d90f      	bls.n	8002502 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f8:	461a      	mov	r2, r3
 80024fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fe:	6093      	str	r3, [r2, #8]
 8002500:	e07e      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	440b      	add	r3, r1
 8002524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800254c:	461a      	mov	r2, r3
 800254e:	2101      	movs	r1, #1
 8002550:	f002 f9be 	bl	80048d0 <USB_EP0_OutStart>
 8002554:	e006      	b.n	8002564 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f004 fc8a 	bl	8006e84 <HAL_PCD_DataOutStageCallback>
 8002570:	e046      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d124      	bne.n	80025c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	6093      	str	r3, [r2, #8]
 8002598:	e032      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b0:	461a      	mov	r2, r3
 80025b2:	2320      	movs	r3, #32
 80025b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f004 fc61 	bl	8006e84 <HAL_PCD_DataOutStageCallback>
 80025c2:	e01d      	b.n	8002600 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d114      	bne.n	80025f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ec:	461a      	mov	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f002 f96e 	bl	80048d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f004 fc42 	bl	8006e84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	4f54300a 	.word	0x4f54300a
 8002610:	4f54310a 	.word	0x4f54310a

08002614 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	333c      	adds	r3, #60	; 0x3c
 800262c:	3304      	adds	r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a15      	ldr	r2, [pc, #84]	; (800269c <PCD_EP_OutSetupPacket_int+0x88>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d90e      	bls.n	8002668 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f004 fbf9 	bl	8006e60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <PCD_EP_OutSetupPacket_int+0x88>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d90c      	bls.n	8002690 <PCD_EP_OutSetupPacket_int+0x7c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002688:	461a      	mov	r2, r3
 800268a:	2101      	movs	r1, #1
 800268c:	f002 f920 	bl	80048d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	4f54300a 	.word	0x4f54300a

080026a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
 80026ac:	4613      	mov	r3, r2
 80026ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026be:	883b      	ldrh	r3, [r7, #0]
 80026c0:	0419      	lsls	r1, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
 80026cc:	e028      	b.n	8002720 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e00d      	b.n	80026fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	3340      	adds	r3, #64	; 0x40
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4413      	add	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	3b01      	subs	r3, #1
 8002704:	429a      	cmp	r2, r3
 8002706:	d3ec      	bcc.n	80026e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002708:	883b      	ldrh	r3, [r7, #0]
 800270a:	0418      	lsls	r0, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	3b01      	subs	r3, #1
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	4302      	orrs	r2, r0
 8002718:	3340      	adds	r3, #64	; 0x40
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e267      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d075      	beq.n	8002872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d00c      	beq.n	80027ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b85      	ldr	r3, [pc, #532]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d112      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b82      	ldr	r3, [pc, #520]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027aa:	d10b      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d05b      	beq.n	8002870 <HAL_RCC_OscConfig+0x108>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d157      	bne.n	8002870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e242      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x74>
 80027ce:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a75      	ldr	r2, [pc, #468]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e01d      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x98>
 80027e6:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b6d      	ldr	r3, [pc, #436]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6c      	ldr	r2, [pc, #432]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xb0>
 8002800:	4b69      	ldr	r3, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a68      	ldr	r2, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a65      	ldr	r2, [pc, #404]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fa14 	bl	8000c4c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fa10 	bl	8000c4c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e207      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xc0>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fa00 	bl	8000c4c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe f9fc 	bl	8000c4c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1f3      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0xe8>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b44      	ldr	r3, [pc, #272]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1c7      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4937      	ldr	r1, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x244>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe f9b5 	bl	8000c4c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe f9b1 	bl	8000c4c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1a8      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4925      	ldr	r1, [pc, #148]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCC_OscConfig+0x244>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe f994 	bl	8000c4c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe f990 	bl	8000c4c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e187      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d036      	beq.n	80029c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_RCC_OscConfig+0x248>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe f974 	bl	8000c4c <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe f970 	bl	8000c4c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e167      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x240>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x200>
 8002986:	e01b      	b.n	80029c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_OscConfig+0x248>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe f95d 	bl	8000c4c <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	e00e      	b.n	80029b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe f959 	bl	8000c4c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d907      	bls.n	80029b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e150      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470000 	.word	0x42470000
 80029b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ea      	bne.n	8002996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8097 	beq.w	8002afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a7c      	ldr	r2, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b77      	ldr	r3, [pc, #476]	; (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b74      	ldr	r3, [pc, #464]	; (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a73      	ldr	r2, [pc, #460]	; (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fe f919 	bl	8000c4c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fe f915 	bl	8000c4c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e10c      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x474>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2ea>
 8002a44:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a63      	ldr	r2, [pc, #396]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x324>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x30c>
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x324>
 8002a74:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a57      	ldr	r2, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a54      	ldr	r2, [pc, #336]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe f8da 	bl	8000c4c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe f8d6 	bl	8000c4c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0cb      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x334>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe f8c4 	bl	8000c4c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe f8c0 	bl	8000c4c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0b5      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a1 	beq.w	8002c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d05c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d141      	bne.n	8002b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe f894 	bl	8000c4c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe f890 	bl	8000c4c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e087      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	491b      	ldr	r1, [pc, #108]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe f869 	bl	8000c4c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe f865 	bl	8000c4c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e05c      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x416>
 8002b9c:	e054      	b.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe f852 	bl	8000c4c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe f84e 	bl	8000c4c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e045      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x444>
 8002bca:	e03d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e038      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x4ec>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d121      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0cc      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d90c      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d044      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e067      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4934      	ldr	r1, [pc, #208]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d48:	f7fd ff80 	bl	8000c4c <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fd ff7c 	bl	8000c4c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e04f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d20c      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490a      	ldr	r1, [pc, #40]	; (8002e18 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fee0 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	080074fc 	.word	0x080074fc
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b094      	sub	sp, #80	; 0x50
 8002e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e30:	2300      	movs	r3, #0
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	2300      	movs	r3, #0
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3c:	4b79      	ldr	r3, [pc, #484]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	f200 80e1 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e56:	e0db      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e5c:	e0db      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e62:	e0d8      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
 8002e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	f04f 0000 	mov.w	r0, #0
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea8:	0150      	lsls	r0, r2, #5
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4621      	mov	r1, r4
 8002eb0:	1a51      	subs	r1, r2, r1
 8002eb2:	6139      	str	r1, [r7, #16]
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	018b      	lsls	r3, r1, #6
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	018a      	lsls	r2, r1, #6
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8002edc:	4659      	mov	r1, fp
 8002ede:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	4699      	mov	r9, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb18 0303 	adds.w	r3, r8, r3
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	462b      	mov	r3, r5
 8002f04:	eb49 0303 	adc.w	r3, r9, r3
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f16:	4629      	mov	r1, r5
 8002f18:	024b      	lsls	r3, r1, #9
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f20:	4621      	mov	r1, r4
 8002f22:	024a      	lsls	r2, r1, #9
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f34:	f7fd f950 	bl	80001d8 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f40:	e058      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0159      	lsls	r1, r3, #5
 8002f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6e:	0150      	lsls	r0, r2, #5
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4641      	mov	r1, r8
 8002f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f94:	ebb2 040a 	subs.w	r4, r2, sl
 8002f98:	eb63 050b 	sbc.w	r5, r3, fp
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	00eb      	lsls	r3, r5, #3
 8002fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002faa:	00e2      	lsls	r2, r4, #3
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	18e3      	adds	r3, r4, r3
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb45 0303 	adc.w	r3, r5, r3
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	61fa      	str	r2, [r7, #28]
 8002fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe8:	f7fd f8f6 	bl	80001d8 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003018:	4618      	mov	r0, r3
 800301a:	3750      	adds	r7, #80	; 0x50
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07b      	b.n	8003152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306a:	d009      	beq.n	8003080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
 8003072:	e005      	b.n	8003080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fcb8 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	ea42 0103 	orr.w	r1, r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0104 	and.w	r1, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0210 	and.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800315a:	b084      	sub	sp, #16
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	f107 001c 	add.w	r0, r7, #28
 8003168:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	2b01      	cmp	r3, #1
 8003170:	d122      	bne.n	80031b8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f001 fbed 	bl	800498c <USB_CoreReset>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e01a      	b.n	80031ee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f001 fbe1 	bl	800498c <USB_CoreReset>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
 80031e0:	e005      	b.n	80031ee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10b      	bne.n	800320c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f043 0206 	orr.w	r2, r3, #6
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003218:	b004      	add	sp, #16
 800321a:	4770      	bx	lr

0800321c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d165      	bne.n	80032fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a41      	ldr	r2, [pc, #260]	; (8003338 <USB_SetTurnaroundTime+0x11c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d906      	bls.n	8003246 <USB_SetTurnaroundTime+0x2a>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4a40      	ldr	r2, [pc, #256]	; (800333c <USB_SetTurnaroundTime+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d202      	bcs.n	8003246 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003240:	230f      	movs	r3, #15
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e062      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <USB_SetTurnaroundTime+0x120>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d306      	bcc.n	800325c <USB_SetTurnaroundTime+0x40>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <USB_SetTurnaroundTime+0x124>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d202      	bcs.n	800325c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003256:	230e      	movs	r3, #14
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e057      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <USB_SetTurnaroundTime+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d306      	bcc.n	8003272 <USB_SetTurnaroundTime+0x56>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4a37      	ldr	r2, [pc, #220]	; (8003344 <USB_SetTurnaroundTime+0x128>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d202      	bcs.n	8003272 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800326c:	230d      	movs	r3, #13
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e04c      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4a33      	ldr	r2, [pc, #204]	; (8003344 <USB_SetTurnaroundTime+0x128>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d306      	bcc.n	8003288 <USB_SetTurnaroundTime+0x6c>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4a32      	ldr	r2, [pc, #200]	; (8003348 <USB_SetTurnaroundTime+0x12c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003282:	230c      	movs	r3, #12
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e041      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <USB_SetTurnaroundTime+0x12c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d906      	bls.n	800329e <USB_SetTurnaroundTime+0x82>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4a2e      	ldr	r2, [pc, #184]	; (800334c <USB_SetTurnaroundTime+0x130>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d802      	bhi.n	800329e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003298:	230b      	movs	r3, #11
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e036      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	; (800334c <USB_SetTurnaroundTime+0x130>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d906      	bls.n	80032b4 <USB_SetTurnaroundTime+0x98>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4a29      	ldr	r2, [pc, #164]	; (8003350 <USB_SetTurnaroundTime+0x134>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d802      	bhi.n	80032b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032ae:	230a      	movs	r3, #10
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e02b      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <USB_SetTurnaroundTime+0x134>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d906      	bls.n	80032ca <USB_SetTurnaroundTime+0xae>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <USB_SetTurnaroundTime+0x138>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d202      	bcs.n	80032ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032c4:	2309      	movs	r3, #9
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e020      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <USB_SetTurnaroundTime+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d306      	bcc.n	80032e0 <USB_SetTurnaroundTime+0xc4>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <USB_SetTurnaroundTime+0x13c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d802      	bhi.n	80032e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80032da:	2308      	movs	r3, #8
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e015      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <USB_SetTurnaroundTime+0x13c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d906      	bls.n	80032f6 <USB_SetTurnaroundTime+0xda>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <USB_SetTurnaroundTime+0x140>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d202      	bcs.n	80032f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80032f0:	2307      	movs	r3, #7
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e00a      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80032f6:	2306      	movs	r3, #6
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e007      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003302:	2309      	movs	r3, #9
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e001      	b.n	800330c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003308:	2309      	movs	r3, #9
 800330a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	00d8acbf 	.word	0x00d8acbf
 800333c:	00e4e1c0 	.word	0x00e4e1c0
 8003340:	00f42400 	.word	0x00f42400
 8003344:	01067380 	.word	0x01067380
 8003348:	011a499f 	.word	0x011a499f
 800334c:	01312cff 	.word	0x01312cff
 8003350:	014ca43f 	.word	0x014ca43f
 8003354:	016e3600 	.word	0x016e3600
 8003358:	01a6ab1f 	.word	0x01a6ab1f
 800335c:	01e84800 	.word	0x01e84800

08003360 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d115      	bne.n	80033f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f7fd fc46 	bl	8000c64 <HAL_Delay>
      ms++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 fa45 	bl	800486e <USB_GetMode>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d01e      	beq.n	8003428 <USB_SetCurrentMode+0x84>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b31      	cmp	r3, #49	; 0x31
 80033ee:	d9f0      	bls.n	80033d2 <USB_SetCurrentMode+0x2e>
 80033f0:	e01a      	b.n	8003428 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d115      	bne.n	8003424 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003404:	2001      	movs	r0, #1
 8003406:	f7fd fc2d 	bl	8000c64 <HAL_Delay>
      ms++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3301      	adds	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f001 fa2c 	bl	800486e <USB_GetMode>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <USB_SetCurrentMode+0x84>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b31      	cmp	r3, #49	; 0x31
 8003420:	d9f0      	bls.n	8003404 <USB_SetCurrentMode+0x60>
 8003422:	e001      	b.n	8003428 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e005      	b.n	8003434 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b32      	cmp	r3, #50	; 0x32
 800342c:	d101      	bne.n	8003432 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800343c:	b084      	sub	sp, #16
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800344a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e009      	b.n	8003470 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3340      	adds	r3, #64	; 0x40
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3301      	adds	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0e      	cmp	r3, #14
 8003474:	d9f2      	bls.n	800345c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11c      	bne.n	80034b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
 80034b4:	e00b      	b.n	80034ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034d4:	461a      	mov	r2, r3
 80034d6:	2300      	movs	r3, #0
 80034d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e0:	4619      	mov	r1, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	461a      	mov	r2, r3
 80034ea:	680b      	ldr	r3, [r1, #0]
 80034ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10c      	bne.n	800350e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f965 	bl	80037cc <USB_SetDevSpeed>
 8003502:	e008      	b.n	8003516 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003504:	2101      	movs	r1, #1
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f960 	bl	80037cc <USB_SetDevSpeed>
 800350c:	e003      	b.n	8003516 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800350e:	2103      	movs	r1, #3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f95b 	bl	80037cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003516:	2110      	movs	r1, #16
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8f3 	bl	8003704 <USB_FlushTxFifo>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f91f 	bl	800376c <USB_FlushRxFifo>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e043      	b.n	80035ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003578:	d118      	bne.n	80035ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e013      	b.n	80035be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e008      	b.n	80035be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3301      	adds	r3, #1
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3b7      	bcc.n	8003562 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e043      	b.n	8003680 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800360a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800360e:	d118      	bne.n	8003642 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e013      	b.n	8003654 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e008      	b.n	8003654 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	2300      	movs	r3, #0
 8003652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3301      	adds	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d3b7      	bcc.n	80035f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f043 0210 	orr.w	r2, r3, #16
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <USB_DevInit+0x2c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f043 0208 	orr.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036fc:	b004      	add	sp, #16
 80036fe:	4770      	bx	lr
 8003700:	803c3800 	.word	0x803c3800

08003704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3301      	adds	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a13      	ldr	r2, [pc, #76]	; (8003768 <USB_FlushTxFifo+0x64>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e01b      	b.n	800375c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	daf2      	bge.n	8003712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	019b      	lsls	r3, r3, #6
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <USB_FlushTxFifo+0x64>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e006      	b.n	800375c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d0f0      	beq.n	800373c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	00030d40 	.word	0x00030d40

0800376c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3301      	adds	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <USB_FlushRxFifo+0x5c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e018      	b.n	80037bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	daf2      	bge.n	8003778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2210      	movs	r2, #16
 800379a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3301      	adds	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <USB_FlushRxFifo+0x5c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e006      	b.n	80037bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d0f0      	beq.n	800379c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	00030d40 	.word	0x00030d40

080037cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0306 	and.w	r3, r3, #6
 8003816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
 8003822:	e00a      	b.n	800383a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d002      	beq.n	8003830 <USB_GetDevSpeed+0x32>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b06      	cmp	r3, #6
 800382e:	d102      	bne.n	8003836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003830:	2302      	movs	r3, #2
 8003832:	75fb      	strb	r3, [r7, #23]
 8003834:	e001      	b.n	800383a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003836:	230f      	movs	r3, #15
 8003838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d13a      	bne.n	80038da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	b29b      	uxth	r3, r3
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003882:	4313      	orrs	r3, r2
 8003884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d155      	bne.n	8003948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	791b      	ldrb	r3, [r3, #4]
 80038b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	059b      	lsls	r3, r3, #22
 80038be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038c0:	4313      	orrs	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e036      	b.n	8003948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11a      	bne.n	8003948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800392e:	430b      	orrs	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d161      	bne.n	8003a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398a:	d11f      	bne.n	80039cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	0151      	lsls	r1, r2, #5
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	440a      	add	r2, r1
 80039c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ec:	4013      	ands	r3, r2
 80039ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	2101      	movs	r1, #1
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a10:	4013      	ands	r3, r2
 8003a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	0159      	lsls	r1, r3, #5
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <USB_DeactivateEndpoint+0x1b0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
 8003a36:	e060      	b.n	8003afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4e:	d11f      	bne.n	8003a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	43db      	mvns	r3, r3
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	0159      	lsls	r1, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	4619      	mov	r1, r3
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <USB_DeactivateEndpoint+0x1b4>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	ec337800 	.word	0xec337800
 8003b0c:	eff37800 	.word	0xeff37800

08003b10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 815c 	bne.w	8003dea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d132      	bne.n	8003ba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	0151      	lsls	r1, r2, #5
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	440a      	add	r2, r1
 8003b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b98:	0cdb      	lsrs	r3, r3, #19
 8003b9a:	04db      	lsls	r3, r3, #19
 8003b9c:	6113      	str	r3, [r2, #16]
 8003b9e:	e074      	b.n	8003c8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bba:	0cdb      	lsrs	r3, r3, #19
 8003bbc:	04db      	lsls	r3, r3, #19
 8003bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	1e59      	subs	r1, r3, #1
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c08:	4b9d      	ldr	r3, [pc, #628]	; (8003e80 <USB_EPStartXfer+0x370>)
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	0148      	lsls	r0, r1, #5
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	4401      	add	r1, r0
 8003c14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	0148      	lsls	r0, r1, #5
 8003c36:	69f9      	ldr	r1, [r7, #28]
 8003c38:	4401      	add	r1, r0
 8003c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	791b      	ldrb	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11f      	bne.n	8003c8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d14b      	bne.n	8003d28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d128      	bne.n	8003d06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d110      	bne.n	8003ce6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e00f      	b.n	8003d06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e133      	b.n	8003f90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	791b      	ldrb	r3, [r3, #4]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d015      	beq.n	8003d7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 811b 	beq.w	8003f90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	69f9      	ldr	r1, [r7, #28]
 8003d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d76:	4313      	orrs	r3, r2
 8003d78:	634b      	str	r3, [r1, #52]	; 0x34
 8003d7a:	e109      	b.n	8003f90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d110      	bne.n	8003dae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	e00f      	b.n	8003dce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	b298      	uxth	r0, r3
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4603      	mov	r3, r0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fade 	bl	80043a4 <USB_WritePacket>
 8003de8:	e0d2      	b.n	8003f90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e04:	0cdb      	lsrs	r3, r3, #19
 8003e06:	04db      	lsls	r3, r3, #19
 8003e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d126      	bne.n	8003e84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	0148      	lsls	r0, r1, #5
 8003e50:	69f9      	ldr	r1, [r7, #28]
 8003e52:	4401      	add	r1, r0
 8003e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e7a:	6113      	str	r3, [r2, #16]
 8003e7c:	e03a      	b.n	8003ef4 <USB_EPStartXfer+0x3e4>
 8003e7e:	bf00      	nop
 8003e80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	8afa      	ldrh	r2, [r7, #22]
 8003ea0:	fb03 f202 	mul.w	r2, r3, r2
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	8afb      	ldrh	r3, [r7, #22]
 8003eb8:	04d9      	lsls	r1, r3, #19
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <USB_EPStartXfer+0x48c>)
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	69b9      	ldr	r1, [r7, #24]
 8003ec0:	0148      	lsls	r0, r1, #5
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	4401      	add	r1, r0
 8003ec6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	0148      	lsls	r0, r1, #5
 8003ee8:	69f9      	ldr	r1, [r7, #28]
 8003eea:	4401      	add	r1, r0
 8003eec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10d      	bne.n	8003f16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6919      	ldr	r1, [r3, #16]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	460a      	mov	r2, r1
 8003f14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	791b      	ldrb	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d128      	bne.n	8003f70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d110      	bne.n	8003f50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00f      	b.n	8003f70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	1ff80000 	.word	0x1ff80000

08003fa0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 80ce 	bne.w	800415e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d132      	bne.n	8004030 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800400c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004028:	0cdb      	lsrs	r3, r3, #19
 800402a:	04db      	lsls	r3, r3, #19
 800402c:	6113      	str	r3, [r2, #16]
 800402e:	e04e      	b.n	80040ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	0cdb      	lsrs	r3, r3, #19
 800404c:	04db      	lsls	r3, r3, #19
 800404e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800406e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004072:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d903      	bls.n	8004088 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	0148      	lsls	r0, r1, #5
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	4401      	add	r1, r0
 80040c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11e      	bne.n	8004112 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e097      	b.n	8004242 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004130:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8083 	beq.w	8004242 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4313      	orrs	r3, r2
 800415a:	634b      	str	r3, [r1, #52]	; 0x34
 800415c:	e071      	b.n	8004242 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	0cdb      	lsrs	r3, r3, #19
 800417a:	04db      	lsls	r3, r3, #19
 800417c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800419c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	0148      	lsls	r0, r1, #5
 80041f4:	6979      	ldr	r1, [r7, #20]
 80041f6:	4401      	add	r1, r0
 80041f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10d      	bne.n	8004222 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	460a      	mov	r2, r1
 8004220:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d14a      	bne.n	8004304 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004286:	f040 8086 	bne.w	8004396 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f242 7210 	movw	r2, #10000	; 0x2710
 80042de:	4293      	cmp	r3, r2
 80042e0:	d902      	bls.n	80042e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
          break;
 80042e6:	e056      	b.n	8004396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004300:	d0e7      	beq.n	80042d2 <USB_EPStopXfer+0x82>
 8004302:	e048      	b.n	8004396 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431c:	d13b      	bne.n	8004396 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004340:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3301      	adds	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004372:	4293      	cmp	r3, r2
 8004374:	d902      	bls.n	800437c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
          break;
 800437a:	e00c      	b.n	8004396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004394:	d0e7      	beq.n	8004366 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	460b      	mov	r3, r1
 80043b4:	71fb      	strb	r3, [r7, #7]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d123      	bne.n	8004412 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043ca:	88bb      	ldrh	r3, [r7, #4]
 80043cc:	3303      	adds	r3, #3
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	e018      	b.n	800440a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	031a      	lsls	r2, r3, #12
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e4:	461a      	mov	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	3301      	adds	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3e2      	bcc.n	80043d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004420:	b480      	push	{r7}
 8004422:	b08b      	sub	sp, #44	; 0x2c
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	b29b      	uxth	r3, r3
 800443c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
 800444a:	e014      	b.n	8004476 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	601a      	str	r2, [r3, #0]
    pDest++;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	3301      	adds	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	3301      	adds	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	3301      	adds	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	3301      	adds	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	3301      	adds	r3, #1
 8004474:	623b      	str	r3, [r7, #32]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d3e6      	bcc.n	800444c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800447e:	8bfb      	ldrh	r3, [r7, #30]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448e:	461a      	mov	r2, r3
 8004490:	f107 0310 	add.w	r3, r7, #16
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	701a      	strb	r2, [r3, #0]
      i++;
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	3301      	adds	r3, #1
 80044ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	3301      	adds	r3, #1
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044b6:	8bfb      	ldrh	r3, [r7, #30]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044bc:	8bfb      	ldrh	r3, [r7, #30]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ea      	bne.n	8004498 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	372c      	adds	r7, #44	; 0x2c
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d12c      	bne.n	8004546 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db12      	blt.n	8004524 <USB_EPSetStall+0x54>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00f      	beq.n	8004524 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004522:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e02b      	b.n	800459e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db12      	blt.n	800457e <USB_EPSetStall+0xae>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00f      	beq.n	800457e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800457c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800459c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d128      	bne.n	800461a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d003      	beq.n	80045f8 <USB_EPClearStall+0x4c>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	791b      	ldrb	r3, [r3, #4]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d138      	bne.n	800466a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	e027      	b.n	800466a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	791b      	ldrb	r3, [r3, #4]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d003      	beq.n	800464a <USB_EPClearStall+0x9e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d10f      	bne.n	800466a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004696:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800469a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f2:	f023 0302 	bic.w	r3, r3, #2
 80046f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004720:	f023 0303 	bic.w	r3, r3, #3
 8004724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0c1b      	lsrs	r3, r3, #16
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	b29b      	uxth	r3, r3
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004804:	68bb      	ldr	r3, [r7, #8]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	01db      	lsls	r3, r3, #7
 8004844:	b2db      	uxtb	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004860:	68bb      	ldr	r3, [r7, #8]
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	460b      	mov	r3, r1
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	333c      	adds	r3, #60	; 0x3c
 80048e6:	3304      	adds	r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4a26      	ldr	r2, [pc, #152]	; (8004988 <USB_EP0_OutStart+0xb8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d90a      	bls.n	800490a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004904:	d101      	bne.n	800490a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e037      	b.n	800497a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004938:	f043 0318 	orr.w	r3, r3, #24
 800493c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10f      	bne.n	8004978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004972:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	4f54300a 	.word	0x4f54300a

0800498c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3301      	adds	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <USB_CoreReset+0x64>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e01b      	b.n	80049e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	daf2      	bge.n	8004998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <USB_CoreReset+0x64>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e006      	b.n	80049e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d0f0      	beq.n	80049c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	00030d40 	.word	0x00030d40

080049f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a04:	f002 fca8 	bl	8007358 <USBD_static_malloc>
 8004a08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	32b0      	adds	r2, #176	; 0xb0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0d4      	b.n	8004bce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004a28:	2100      	movs	r1, #0
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f002 fcfc 	bl	8007428 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	32b0      	adds	r2, #176	; 0xb0
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	32b0      	adds	r2, #176	; 0xb0
 8004a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7c1b      	ldrb	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d138      	bne.n	8004ace <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	; (8004bd8 <USBD_CDC_Init+0x1e4>)
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a64:	2202      	movs	r2, #2
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f002 fb53 	bl	8007112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a6c:	4b5a      	ldr	r3, [pc, #360]	; (8004bd8 <USBD_CDC_Init+0x1e4>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3324      	adds	r3, #36	; 0x24
 8004a82:	2201      	movs	r2, #1
 8004a84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a86:	4b55      	ldr	r3, [pc, #340]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004a88:	7819      	ldrb	r1, [r3, #0]
 8004a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8e:	2202      	movs	r2, #2
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f002 fb3e 	bl	8007112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004a96:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	f003 020f 	and.w	r2, r3, #15
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004aae:	2201      	movs	r2, #1
 8004ab0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ab2:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <USBD_CDC_Init+0x1ec>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f003 020f 	and.w	r2, r3, #15
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3326      	adds	r3, #38	; 0x26
 8004ac8:	2210      	movs	r2, #16
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	e035      	b.n	8004b3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ace:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <USBD_CDC_Init+0x1e4>)
 8004ad0:	7819      	ldrb	r1, [r3, #0]
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 fb1b 	bl	8007112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <USBD_CDC_Init+0x1e4>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3324      	adds	r3, #36	; 0x24
 8004af2:	2201      	movs	r2, #1
 8004af4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004af8:	7819      	ldrb	r1, [r3, #0]
 8004afa:	2340      	movs	r3, #64	; 0x40
 8004afc:	2202      	movs	r2, #2
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f002 fb07 	bl	8007112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b20:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <USBD_CDC_Init+0x1ec>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 020f 	and.w	r2, r3, #15
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3326      	adds	r3, #38	; 0x26
 8004b36:	2210      	movs	r2, #16
 8004b38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b3a:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <USBD_CDC_Init+0x1ec>)
 8004b3c:	7819      	ldrb	r1, [r3, #0]
 8004b3e:	2308      	movs	r3, #8
 8004b40:	2203      	movs	r2, #3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f002 fae5 	bl	8007112 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <USBD_CDC_Init+0x1ec>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3324      	adds	r3, #36	; 0x24
 8004b5e:	2201      	movs	r2, #1
 8004b60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	33b0      	adds	r3, #176	; 0xb0
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e018      	b.n	8004bce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7c1b      	ldrb	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004ba6:	7819      	ldrb	r1, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f002 fb9c 	bl	80072f0 <USBD_LL_PrepareReceive>
 8004bb8:	e008      	b.n	8004bcc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <USBD_CDC_Init+0x1e8>)
 8004bbc:	7819      	ldrb	r1, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bc4:	2340      	movs	r3, #64	; 0x40
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f002 fb92 	bl	80072f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000093 	.word	0x20000093
 8004bdc:	20000094 	.word	0x20000094
 8004be0:	20000095 	.word	0x20000095

08004be4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <USBD_CDC_DeInit+0xf8>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f002 fab1 	bl	800715e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <USBD_CDC_DeInit+0xf8>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	3324      	adds	r3, #36	; 0x24
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <USBD_CDC_DeInit+0xfc>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f002 fa9e 	bl	800715e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <USBD_CDC_DeInit+0xfc>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <USBD_CDC_DeInit+0x100>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f002 fa8a 	bl	800715e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <USBD_CDC_DeInit+0x100>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 020f 	and.w	r2, r3, #15
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004c64:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <USBD_CDC_DeInit+0x100>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3326      	adds	r3, #38	; 0x26
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	32b0      	adds	r2, #176	; 0xb0
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01f      	beq.n	8004cd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	33b0      	adds	r3, #176	; 0xb0
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	32b0      	adds	r2, #176	; 0xb0
 8004cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f002 fb5e 	bl	8007374 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	32b0      	adds	r2, #176	; 0xb0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000093 	.word	0x20000093
 8004ce0:	20000094 	.word	0x20000094
 8004ce4:	20000095 	.word	0x20000095

08004ce8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	32b0      	adds	r2, #176	; 0xb0
 8004cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0bf      	b.n	8004e98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d050      	beq.n	8004dc6 <USBD_CDC_Setup+0xde>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	f040 80af 	bne.w	8004e88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	88db      	ldrh	r3, [r3, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03a      	beq.n	8004da8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da1b      	bge.n	8004d74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	33b0      	adds	r3, #176	; 0xb0
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004d52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	88d2      	ldrh	r2, [r2, #6]
 8004d58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	88db      	ldrh	r3, [r3, #6]
 8004d5e:	2b07      	cmp	r3, #7
 8004d60:	bf28      	it	cs
 8004d62:	2307      	movcs	r3, #7
 8004d64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	89fa      	ldrh	r2, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 fd89 	bl	8006884 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004d72:	e090      	b.n	8004e96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	785a      	ldrb	r2, [r3, #1]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	88db      	ldrh	r3, [r3, #6]
 8004d82:	2b3f      	cmp	r3, #63	; 0x3f
 8004d84:	d803      	bhi.n	8004d8e <USBD_CDC_Setup+0xa6>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	88db      	ldrh	r3, [r3, #6]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	e000      	b.n	8004d90 <USBD_CDC_Setup+0xa8>
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004d96:	6939      	ldr	r1, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fd9b 	bl	80068dc <USBD_CtlPrepareRx>
      break;
 8004da6:	e076      	b.n	8004e96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	33b0      	adds	r3, #176	; 0xb0
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	7850      	ldrb	r0, [r2, #1]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	4798      	blx	r3
      break;
 8004dc4:	e067      	b.n	8004e96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b0b      	cmp	r3, #11
 8004dcc:	d851      	bhi.n	8004e72 <USBD_CDC_Setup+0x18a>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <USBD_CDC_Setup+0xec>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e05 	.word	0x08004e05
 8004dd8:	08004e81 	.word	0x08004e81
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004e73 	.word	0x08004e73
 8004de4:	08004e73 	.word	0x08004e73
 8004de8:	08004e73 	.word	0x08004e73
 8004dec:	08004e73 	.word	0x08004e73
 8004df0:	08004e73 	.word	0x08004e73
 8004df4:	08004e73 	.word	0x08004e73
 8004df8:	08004e73 	.word	0x08004e73
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e59 	.word	0x08004e59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d107      	bne.n	8004e20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e10:	f107 030a 	add.w	r3, r7, #10
 8004e14:	2202      	movs	r2, #2
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 fd33 	bl	8006884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e1e:	e032      	b.n	8004e86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fcbd 	bl	80067a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8004e2c:	e02b      	b.n	8004e86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e3a:	f107 030d 	add.w	r3, r7, #13
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fd1e 	bl	8006884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e48:	e01d      	b.n	8004e86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 fca8 	bl	80067a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e52:	2303      	movs	r3, #3
 8004e54:	75fb      	strb	r3, [r7, #23]
          break;
 8004e56:	e016      	b.n	8004e86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d00f      	beq.n	8004e84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 fc9b 	bl	80067a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e70:	e008      	b.n	8004e84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fc94 	bl	80067a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e7e:	e002      	b.n	8004e86 <USBD_CDC_Setup+0x19e>
          break;
 8004e80:	bf00      	nop
 8004e82:	e008      	b.n	8004e96 <USBD_CDC_Setup+0x1ae>
          break;
 8004e84:	bf00      	nop
      }
      break;
 8004e86:	e006      	b.n	8004e96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fc89 	bl	80067a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e90:	2303      	movs	r3, #3
 8004e92:	75fb      	strb	r3, [r7, #23]
      break;
 8004e94:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004eb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	32b0      	adds	r2, #176	; 0xb0
 8004ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e065      	b.n	8004f96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	32b0      	adds	r2, #176	; 0xb0
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3318      	adds	r3, #24
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02f      	beq.n	8004f54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 020f 	and.w	r2, r3, #15
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3318      	adds	r3, #24
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 010f 	and.w	r1, r3, #15
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	460b      	mov	r3, r1
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4403      	add	r3, r0
 8004f1c:	3348      	adds	r3, #72	; 0x48
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d112      	bne.n	8004f54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3318      	adds	r3, #24
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f46:	78f9      	ldrb	r1, [r7, #3]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f002 f9ae 	bl	80072ae <USBD_LL_Transmit>
 8004f52:	e01f      	b.n	8004f94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	33b0      	adds	r3, #176	; 0xb0
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	33b0      	adds	r3, #176	; 0xb0
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	32b0      	adds	r2, #176	; 0xb0
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	32b0      	adds	r2, #176	; 0xb0
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e01a      	b.n	8005006 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 f9ac 	bl	8007332 <USBD_LL_GetRxDataSize>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	33b0      	adds	r3, #176	; 0xb0
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005000:	4611      	mov	r1, r2
 8005002:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	32b0      	adds	r2, #176	; 0xb0
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800502c:	2303      	movs	r3, #3
 800502e:	e025      	b.n	800507c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	33b0      	adds	r3, #176	; 0xb0
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01a      	beq.n	800507a <USBD_CDC_EP0_RxReady+0x6c>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800504a:	2bff      	cmp	r3, #255	; 0xff
 800504c:	d015      	beq.n	800507a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	33b0      	adds	r3, #176	; 0xb0
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005066:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800506e:	b292      	uxth	r2, r2
 8005070:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800508c:	2182      	movs	r1, #130	; 0x82
 800508e:	4818      	ldr	r0, [pc, #96]	; (80050f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005090:	f000 fd4f 	bl	8005b32 <USBD_GetEpDesc>
 8005094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005096:	2101      	movs	r1, #1
 8005098:	4815      	ldr	r0, [pc, #84]	; (80050f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800509a:	f000 fd4a 	bl	8005b32 <USBD_GetEpDesc>
 800509e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80050a0:	2181      	movs	r1, #129	; 0x81
 80050a2:	4813      	ldr	r0, [pc, #76]	; (80050f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80050a4:	f000 fd45 	bl	8005b32 <USBD_GetEpDesc>
 80050a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2210      	movs	r2, #16
 80050b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d006      	beq.n	80050ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2200      	movs	r2, #0
 80050c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c4:	711a      	strb	r2, [r3, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	711a      	strb	r2, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2243      	movs	r2, #67	; 0x43
 80050e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80050e4:	4b02      	ldr	r3, [pc, #8]	; (80050f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000050 	.word	0x20000050

080050f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050fc:	2182      	movs	r1, #130	; 0x82
 80050fe:	4818      	ldr	r0, [pc, #96]	; (8005160 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005100:	f000 fd17 	bl	8005b32 <USBD_GetEpDesc>
 8005104:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005106:	2101      	movs	r1, #1
 8005108:	4815      	ldr	r0, [pc, #84]	; (8005160 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800510a:	f000 fd12 	bl	8005b32 <USBD_GetEpDesc>
 800510e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005110:	2181      	movs	r1, #129	; 0x81
 8005112:	4813      	ldr	r0, [pc, #76]	; (8005160 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005114:	f000 fd0d 	bl	8005b32 <USBD_GetEpDesc>
 8005118:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2210      	movs	r2, #16
 8005124:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2200      	movs	r2, #0
 8005130:	711a      	strb	r2, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f042 0202 	orr.w	r2, r2, #2
 8005138:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	711a      	strb	r2, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f042 0202 	orr.w	r2, r2, #2
 800514c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2243      	movs	r2, #67	; 0x43
 8005152:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000050 	.word	0x20000050

08005164 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800516c:	2182      	movs	r1, #130	; 0x82
 800516e:	4818      	ldr	r0, [pc, #96]	; (80051d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005170:	f000 fcdf 	bl	8005b32 <USBD_GetEpDesc>
 8005174:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005176:	2101      	movs	r1, #1
 8005178:	4815      	ldr	r0, [pc, #84]	; (80051d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800517a:	f000 fcda 	bl	8005b32 <USBD_GetEpDesc>
 800517e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005180:	2181      	movs	r1, #129	; 0x81
 8005182:	4813      	ldr	r0, [pc, #76]	; (80051d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005184:	f000 fcd5 	bl	8005b32 <USBD_GetEpDesc>
 8005188:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2210      	movs	r2, #16
 8005194:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2200      	movs	r2, #0
 80051a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a4:	711a      	strb	r2, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	711a      	strb	r2, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2243      	movs	r2, #67	; 0x43
 80051c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000050 	.word	0x20000050

080051d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	220a      	movs	r2, #10
 80051e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80051e2:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000000c 	.word	0x2000000c

080051f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005204:	2303      	movs	r3, #3
 8005206:	e009      	b.n	800521c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	33b0      	adds	r3, #176	; 0xb0
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	32b0      	adds	r2, #176	; 0xb0
 800523e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005242:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800524a:	2303      	movs	r3, #3
 800524c:	e008      	b.n	8005260 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	32b0      	adds	r2, #176	; 0xb0
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800528c:	2303      	movs	r3, #3
 800528e:	e004      	b.n	800529a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	; 0xb0
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	32b0      	adds	r2, #176	; 0xb0
 80052ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e025      	b.n	8005326 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11f      	bne.n	8005324 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <USBD_CDC_TransmitPacket+0x88>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f003 020f 	and.w	r2, r3, #15
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4403      	add	r3, r0
 8005306:	3318      	adds	r3, #24
 8005308:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <USBD_CDC_TransmitPacket+0x88>)
 800530c:	7819      	ldrb	r1, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 ffc7 	bl	80072ae <USBD_LL_Transmit>

    ret = USBD_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000093 	.word	0x20000093

08005334 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32b0      	adds	r2, #176	; 0xb0
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	32b0      	adds	r2, #176	; 0xb0
 8005356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800535e:	2303      	movs	r3, #3
 8005360:	e018      	b.n	8005394 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7c1b      	ldrb	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <USBD_CDC_ReceivePacket+0x68>)
 800536c:	7819      	ldrb	r1, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 ffb9 	bl	80072f0 <USBD_LL_PrepareReceive>
 800537e:	e008      	b.n	8005392 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <USBD_CDC_ReceivePacket+0x68>)
 8005382:	7819      	ldrb	r1, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 ffaf 	bl	80072f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000094 	.word	0x20000094

080053a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e01f      	b.n	80053f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	79fa      	ldrb	r2, [r7, #7]
 80053ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f001 fe29 	bl	8007044 <USBD_LL_Init>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005414:	2303      	movs	r3, #3
 8005416:	e025      	b.n	8005464 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	32ae      	adds	r2, #174	; 0xae
 800542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00f      	beq.n	8005454 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32ae      	adds	r2, #174	; 0xae
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	f107 020e 	add.w	r2, r7, #14
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	4602      	mov	r2, r0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 fe31 	bl	80070dc <USBD_LL_Start>
 800547a:	4603      	mov	r3, r0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800548c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	4611      	mov	r1, r2
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4611      	mov	r1, r2
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f908 	bl	800672e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800552c:	461a      	mov	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2b02      	cmp	r3, #2
 8005540:	d01a      	beq.n	8005578 <USBD_LL_SetupStage+0x72>
 8005542:	2b02      	cmp	r3, #2
 8005544:	d822      	bhi.n	800558c <USBD_LL_SetupStage+0x86>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <USBD_LL_SetupStage+0x4a>
 800554a:	2b01      	cmp	r3, #1
 800554c:	d00a      	beq.n	8005564 <USBD_LL_SetupStage+0x5e>
 800554e:	e01d      	b.n	800558c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fb5f 	bl	8005c1c <USBD_StdDevReq>
 800555e:	4603      	mov	r3, r0
 8005560:	73fb      	strb	r3, [r7, #15]
      break;
 8005562:	e020      	b.n	80055a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fbc7 	bl	8005d00 <USBD_StdItfReq>
 8005572:	4603      	mov	r3, r0
 8005574:	73fb      	strb	r3, [r7, #15]
      break;
 8005576:	e016      	b.n	80055a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fc29 	bl	8005dd8 <USBD_StdEPReq>
 8005586:	4603      	mov	r3, r0
 8005588:	73fb      	strb	r3, [r7, #15]
      break;
 800558a:	e00c      	b.n	80055a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005592:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005596:	b2db      	uxtb	r3, r3
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fdfe 	bl	800719c <USBD_LL_StallEP>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	bf00      	nop
  }

  return ret;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	460b      	mov	r3, r1
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d16e      	bne.n	80056a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	f040 8098 	bne.w	800570c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d913      	bls.n	8005610 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4293      	cmp	r3, r2
 8005600:	bf28      	it	cs
 8005602:	4613      	movcs	r3, r2
 8005604:	461a      	mov	r2, r3
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f001 f984 	bl	8006916 <USBD_CtlContinueRx>
 800560e:	e07d      	b.n	800570c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2b02      	cmp	r3, #2
 800561c:	d014      	beq.n	8005648 <USBD_LL_DataOutStage+0x98>
 800561e:	2b02      	cmp	r3, #2
 8005620:	d81d      	bhi.n	800565e <USBD_LL_DataOutStage+0xae>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <USBD_LL_DataOutStage+0x7c>
 8005626:	2b01      	cmp	r3, #1
 8005628:	d003      	beq.n	8005632 <USBD_LL_DataOutStage+0x82>
 800562a:	e018      	b.n	800565e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	75bb      	strb	r3, [r7, #22]
            break;
 8005630:	e018      	b.n	8005664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005638:	b2db      	uxtb	r3, r3
 800563a:	4619      	mov	r1, r3
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fa5e 	bl	8005afe <USBD_CoreFindIF>
 8005642:	4603      	mov	r3, r0
 8005644:	75bb      	strb	r3, [r7, #22]
            break;
 8005646:	e00d      	b.n	8005664 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa60 	bl	8005b18 <USBD_CoreFindEP>
 8005658:	4603      	mov	r3, r0
 800565a:	75bb      	strb	r3, [r7, #22]
            break;
 800565c:	e002      	b.n	8005664 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	75bb      	strb	r3, [r7, #22]
            break;
 8005662:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005664:	7dbb      	ldrb	r3, [r7, #22]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d119      	bne.n	800569e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b03      	cmp	r3, #3
 8005674:	d113      	bne.n	800569e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005676:	7dba      	ldrb	r2, [r7, #22]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	32ae      	adds	r2, #174	; 0xae
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005686:	7dba      	ldrb	r2, [r7, #22]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800568e:	7dba      	ldrb	r2, [r7, #22]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	32ae      	adds	r2, #174	; 0xae
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f001 f94a 	bl	8006938 <USBD_CtlSendStatus>
 80056a4:	e032      	b.n	800570c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056a6:	7afb      	ldrb	r3, [r7, #11]
 80056a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fa31 	bl	8005b18 <USBD_CoreFindEP>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056ba:	7dbb      	ldrb	r3, [r7, #22]
 80056bc:	2bff      	cmp	r3, #255	; 0xff
 80056be:	d025      	beq.n	800570c <USBD_LL_DataOutStage+0x15c>
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d122      	bne.n	800570c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d117      	bne.n	8005702 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80056d2:	7dba      	ldrb	r2, [r7, #22]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	32ae      	adds	r2, #174	; 0xae
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00f      	beq.n	8005702 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80056e2:	7dba      	ldrb	r2, [r7, #22]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80056ea:	7dba      	ldrb	r2, [r7, #22]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	32ae      	adds	r2, #174	; 0xae
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	7afa      	ldrb	r2, [r7, #11]
 80056f8:	4611      	mov	r1, r2
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	4798      	blx	r3
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	e000      	b.n	800570e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	460b      	mov	r3, r1
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d16f      	bne.n	800580a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3314      	adds	r3, #20
 800572e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005736:	2b02      	cmp	r3, #2
 8005738:	d15a      	bne.n	80057f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d914      	bls.n	8005770 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	461a      	mov	r2, r3
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f001 f8ac 	bl	80068ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005762:	2300      	movs	r3, #0
 8005764:	2200      	movs	r2, #0
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f001 fdc1 	bl	80072f0 <USBD_LL_PrepareReceive>
 800576e:	e03f      	b.n	80057f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d11c      	bne.n	80057b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005784:	429a      	cmp	r2, r3
 8005786:	d316      	bcc.n	80057b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005792:	429a      	cmp	r2, r3
 8005794:	d20f      	bcs.n	80057b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f001 f88d 	bl	80068ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057a8:	2300      	movs	r3, #0
 80057aa:	2200      	movs	r2, #0
 80057ac:	2100      	movs	r1, #0
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fd9e 	bl	80072f0 <USBD_LL_PrepareReceive>
 80057b4:	e01c      	b.n	80057f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d10f      	bne.n	80057e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 fcd9 	bl	800719c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f001 f8b7 	bl	800695e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03a      	beq.n	8005870 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fe42 	bl	8005484 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005808:	e032      	b.n	8005870 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f97f 	bl	8005b18 <USBD_CoreFindEP>
 800581a:	4603      	mov	r3, r0
 800581c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	2bff      	cmp	r3, #255	; 0xff
 8005822:	d025      	beq.n	8005870 <USBD_LL_DataInStage+0x15a>
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d122      	bne.n	8005870 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d11c      	bne.n	8005870 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005836:	7dfa      	ldrb	r2, [r7, #23]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	32ae      	adds	r2, #174	; 0xae
 800583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005846:	7dfa      	ldrb	r2, [r7, #23]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800584e:	7dfa      	ldrb	r2, [r7, #23]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	32ae      	adds	r2, #174	; 0xae
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	7afa      	ldrb	r2, [r7, #11]
 800585c:	4611      	mov	r1, r2
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005866:	7dbb      	ldrb	r3, [r7, #22]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800586c:	7dbb      	ldrb	r3, [r7, #22]
 800586e:	e000      	b.n	8005872 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00e      	beq.n	80058e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6852      	ldr	r2, [r2, #4]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	4611      	mov	r1, r2
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	2200      	movs	r2, #0
 80058e4:	2100      	movs	r1, #0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fc13 	bl	8007112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058fc:	2340      	movs	r3, #64	; 0x40
 80058fe:	2200      	movs	r2, #0
 8005900:	2180      	movs	r1, #128	; 0x80
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fc05 	bl	8007112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	621a      	str	r2, [r3, #32]

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b04      	cmp	r3, #4
 800597c:	d106      	bne.n	800598c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005984:	b2da      	uxtb	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d110      	bne.n	80059d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	32ae      	adds	r2, #174	; 0xae
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e01c      	b.n	8005a36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d115      	bne.n	8005a34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32ae      	adds	r2, #174	; 0xae
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	32ae      	adds	r2, #174	; 0xae
 8005a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32ae      	adds	r2, #174	; 0xae
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e01c      	b.n	8005a9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d115      	bne.n	8005a98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	32ae      	adds	r2, #174	; 0xae
 8005a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	32ae      	adds	r2, #174	; 0xae
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	4611      	mov	r1, r2
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6852      	ldr	r2, [r2, #4]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	460b      	mov	r3, r1
 8005b08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d920      	bls.n	8005b9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005b62:	e013      	b.n	8005b8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005b64:	f107 030a 	add.w	r3, r7, #10
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f000 f81b 	bl	8005ba6 <USBD_GetNextDesc>
 8005b70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d108      	bne.n	8005b8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	789b      	ldrb	r3, [r3, #2]
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d008      	beq.n	8005b9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	885b      	ldrh	r3, [r3, #2]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	897b      	ldrh	r3, [r7, #10]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d8e5      	bhi.n	8005b64 <USBD_GetEpDesc+0x32>
 8005b98:	e000      	b.n	8005b9c <USBD_GetEpDesc+0x6a>
          break;
 8005b9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b9c:	693b      	ldr	r3, [r7, #16]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005bfe:	8a3b      	ldrh	r3, [r7, #16]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	b21a      	sxth	r2, r3
 8005c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	b21b      	sxth	r3, r3
 8005c0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d005      	beq.n	8005c42 <USBD_StdDevReq+0x26>
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d857      	bhi.n	8005cea <USBD_StdDevReq+0xce>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00f      	beq.n	8005c5e <USBD_StdDevReq+0x42>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d153      	bne.n	8005cea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	32ae      	adds	r2, #174	; 0xae
 8005c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	e04a      	b.n	8005cf4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d83b      	bhi.n	8005cde <USBD_StdDevReq+0xc2>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBD_StdDevReq+0x50>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cdf 	.word	0x08005cdf
 8005c78:	08005ccb 	.word	0x08005ccb
 8005c7c:	08005cdf 	.word	0x08005cdf
 8005c80:	08005c9f 	.word	0x08005c9f
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cdf 	.word	0x08005cdf
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005ca9 	.word	0x08005ca9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa3c 	bl	8006114 <USBD_GetDescriptor>
          break;
 8005c9c:	e024      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fba1 	bl	80063e8 <USBD_SetAddress>
          break;
 8005ca6:	e01f      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fbe0 	bl	8006470 <USBD_SetConfig>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8005cb4:	e018      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fc83 	bl	80065c4 <USBD_GetConfig>
          break;
 8005cbe:	e013      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fcb4 	bl	8006630 <USBD_GetStatus>
          break;
 8005cc8:	e00e      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fce3 	bl	8006698 <USBD_SetFeature>
          break;
 8005cd2:	e009      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fd07 	bl	80066ea <USBD_ClrFeature>
          break;
 8005cdc:	e004      	b.n	8005ce8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fd5e 	bl	80067a2 <USBD_CtlError>
          break;
 8005ce6:	bf00      	nop
      }
      break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fd58 	bl	80067a2 <USBD_CtlError>
      break;
 8005cf2:	bf00      	nop
  }

  return ret;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop

08005d00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d005      	beq.n	8005d26 <USBD_StdItfReq+0x26>
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d852      	bhi.n	8005dc4 <USBD_StdItfReq+0xc4>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <USBD_StdItfReq+0x26>
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d14e      	bne.n	8005dc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d840      	bhi.n	8005db6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	889b      	ldrh	r3, [r3, #4]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d836      	bhi.n	8005dac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	889b      	ldrh	r3, [r3, #4]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fed9 	bl	8005afe <USBD_CoreFindIF>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2bff      	cmp	r3, #255	; 0xff
 8005d54:	d01d      	beq.n	8005d92 <USBD_StdItfReq+0x92>
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11a      	bne.n	8005d92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005d5c:	7bba      	ldrb	r2, [r7, #14]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	32ae      	adds	r2, #174	; 0xae
 8005d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00f      	beq.n	8005d8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d6c:	7bba      	ldrb	r2, [r7, #14]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d74:	7bba      	ldrb	r2, [r7, #14]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	32ae      	adds	r2, #174	; 0xae
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d8a:	e004      	b.n	8005d96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d90:	e001      	b.n	8005d96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005d92:	2303      	movs	r3, #3
 8005d94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88db      	ldrh	r3, [r3, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d110      	bne.n	8005dc0 <USBD_StdItfReq+0xc0>
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10d      	bne.n	8005dc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fdc7 	bl	8006938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005daa:	e009      	b.n	8005dc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fcf7 	bl	80067a2 <USBD_CtlError>
          break;
 8005db4:	e004      	b.n	8005dc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fcf2 	bl	80067a2 <USBD_CtlError>
          break;
 8005dbe:	e000      	b.n	8005dc2 <USBD_StdItfReq+0xc2>
          break;
 8005dc0:	bf00      	nop
      }
      break;
 8005dc2:	e004      	b.n	8005dce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fceb 	bl	80067a2 <USBD_CtlError>
      break;
 8005dcc:	bf00      	nop
  }

  return ret;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	889b      	ldrh	r3, [r3, #4]
 8005dea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d007      	beq.n	8005e08 <USBD_StdEPReq+0x30>
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	f200 817f 	bhi.w	80060fc <USBD_StdEPReq+0x324>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d02a      	beq.n	8005e58 <USBD_StdEPReq+0x80>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	f040 817a 	bne.w	80060fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fe83 	bl	8005b18 <USBD_CoreFindEP>
 8005e12:	4603      	mov	r3, r0
 8005e14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2bff      	cmp	r3, #255	; 0xff
 8005e1a:	f000 8174 	beq.w	8006106 <USBD_StdEPReq+0x32e>
 8005e1e:	7b7b      	ldrb	r3, [r7, #13]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8170 	bne.w	8006106 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e26:	7b7a      	ldrb	r2, [r7, #13]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e2e:	7b7a      	ldrb	r2, [r7, #13]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	32ae      	adds	r2, #174	; 0xae
 8005e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8163 	beq.w	8006106 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e40:	7b7a      	ldrb	r2, [r7, #13]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	32ae      	adds	r2, #174	; 0xae
 8005e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e56:	e156      	b.n	8006106 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d008      	beq.n	8005e72 <USBD_StdEPReq+0x9a>
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	f300 8145 	bgt.w	80060f0 <USBD_StdEPReq+0x318>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 809b 	beq.w	8005fa2 <USBD_StdEPReq+0x1ca>
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d03c      	beq.n	8005eea <USBD_StdEPReq+0x112>
 8005e70:	e13e      	b.n	80060f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d002      	beq.n	8005e84 <USBD_StdEPReq+0xac>
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d016      	beq.n	8005eb0 <USBD_StdEPReq+0xd8>
 8005e82:	e02c      	b.n	8005ede <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <USBD_StdEPReq+0xce>
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	2b80      	cmp	r3, #128	; 0x80
 8005e8e:	d00a      	beq.n	8005ea6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e90:	7bbb      	ldrb	r3, [r7, #14]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f981 	bl	800719c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e9a:	2180      	movs	r1, #128	; 0x80
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 f97d 	bl	800719c <USBD_LL_StallEP>
 8005ea2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ea4:	e020      	b.n	8005ee8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc7a 	bl	80067a2 <USBD_CtlError>
              break;
 8005eae:	e01b      	b.n	8005ee8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	885b      	ldrh	r3, [r3, #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10e      	bne.n	8005ed6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <USBD_StdEPReq+0xfe>
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	d008      	beq.n	8005ed6 <USBD_StdEPReq+0xfe>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	88db      	ldrh	r3, [r3, #6]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d104      	bne.n	8005ed6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 f963 	bl	800719c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd2e 	bl	8006938 <USBD_CtlSendStatus>

              break;
 8005edc:	e004      	b.n	8005ee8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc5e 	bl	80067a2 <USBD_CtlError>
              break;
 8005ee6:	bf00      	nop
          }
          break;
 8005ee8:	e107      	b.n	80060fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d002      	beq.n	8005efc <USBD_StdEPReq+0x124>
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d016      	beq.n	8005f28 <USBD_StdEPReq+0x150>
 8005efa:	e04b      	b.n	8005f94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <USBD_StdEPReq+0x146>
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d00a      	beq.n	8005f1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 f945 	bl	800719c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f941 	bl	800719c <USBD_LL_StallEP>
 8005f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f1c:	e040      	b.n	8005fa0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fc3e 	bl	80067a2 <USBD_CtlError>
              break;
 8005f26:	e03b      	b.n	8005fa0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	885b      	ldrh	r3, [r3, #2]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d136      	bne.n	8005f9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 f94b 	bl	80071da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fcf7 	bl	8006938 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fde2 	bl	8005b18 <USBD_CoreFindEP>
 8005f54:	4603      	mov	r3, r0
 8005f56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f58:	7b7b      	ldrb	r3, [r7, #13]
 8005f5a:	2bff      	cmp	r3, #255	; 0xff
 8005f5c:	d01f      	beq.n	8005f9e <USBD_StdEPReq+0x1c6>
 8005f5e:	7b7b      	ldrb	r3, [r7, #13]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11c      	bne.n	8005f9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005f64:	7b7a      	ldrb	r2, [r7, #13]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f6c:	7b7a      	ldrb	r2, [r7, #13]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32ae      	adds	r2, #174	; 0xae
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d010      	beq.n	8005f9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f7c:	7b7a      	ldrb	r2, [r7, #13]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	32ae      	adds	r2, #174	; 0xae
 8005f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005f92:	e004      	b.n	8005f9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fc03 	bl	80067a2 <USBD_CtlError>
              break;
 8005f9c:	e000      	b.n	8005fa0 <USBD_StdEPReq+0x1c8>
              break;
 8005f9e:	bf00      	nop
          }
          break;
 8005fa0:	e0ab      	b.n	80060fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d002      	beq.n	8005fb4 <USBD_StdEPReq+0x1dc>
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d032      	beq.n	8006018 <USBD_StdEPReq+0x240>
 8005fb2:	e097      	b.n	80060e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <USBD_StdEPReq+0x1f2>
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d004      	beq.n	8005fca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fbed 	bl	80067a2 <USBD_CtlError>
                break;
 8005fc8:	e091      	b.n	80060ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da0b      	bge.n	8005fea <USBD_StdEPReq+0x212>
 8005fd2:	7bbb      	ldrb	r3, [r7, #14]
 8005fd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	e00b      	b.n	8006002 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2202      	movs	r2, #2
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc37 	bl	8006884 <USBD_CtlSendData>
              break;
 8006016:	e06a      	b.n	80060ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da11      	bge.n	8006044 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d117      	bne.n	800606a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fbb0 	bl	80067a2 <USBD_CtlError>
                  break;
 8006042:	e054      	b.n	80060ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb9d 	bl	80067a2 <USBD_CtlError>
                  break;
 8006068:	e041      	b.n	80060ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800606a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da0b      	bge.n	800608a <USBD_StdEPReq+0x2b2>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	3310      	adds	r3, #16
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	e00b      	b.n	80060a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <USBD_StdEPReq+0x2d8>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d103      	bne.n	80060b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e00e      	b.n	80060d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f8ab 	bl	8007218 <USBD_LL_IsStallEP>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2202      	movs	r2, #2
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fbd1 	bl	8006884 <USBD_CtlSendData>
              break;
 80060e2:	e004      	b.n	80060ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb5b 	bl	80067a2 <USBD_CtlError>
              break;
 80060ec:	bf00      	nop
          }
          break;
 80060ee:	e004      	b.n	80060fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb55 	bl	80067a2 <USBD_CtlError>
          break;
 80060f8:	bf00      	nop
      }
      break;
 80060fa:	e005      	b.n	8006108 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fb4f 	bl	80067a2 <USBD_CtlError>
      break;
 8006104:	e000      	b.n	8006108 <USBD_StdEPReq+0x330>
      break;
 8006106:	bf00      	nop
  }

  return ret;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	2b06      	cmp	r3, #6
 8006136:	f200 8128 	bhi.w	800638a <USBD_GetDescriptor+0x276>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <USBD_GetDescriptor+0x2c>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	0800615d 	.word	0x0800615d
 8006144:	08006175 	.word	0x08006175
 8006148:	080061b5 	.word	0x080061b5
 800614c:	0800638b 	.word	0x0800638b
 8006150:	0800638b 	.word	0x0800638b
 8006154:	0800632b 	.word	0x0800632b
 8006158:	08006357 	.word	0x08006357
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	7c12      	ldrb	r2, [r2, #16]
 8006168:	f107 0108 	add.w	r1, r7, #8
 800616c:	4610      	mov	r0, r2
 800616e:	4798      	blx	r3
 8006170:	60f8      	str	r0, [r7, #12]
      break;
 8006172:	e112      	b.n	800639a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7c1b      	ldrb	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10d      	bne.n	8006198 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	f107 0208 	add.w	r2, r7, #8
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	2202      	movs	r2, #2
 8006194:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006196:	e100      	b.n	800639a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f107 0208 	add.w	r2, r7, #8
 80061a4:	4610      	mov	r0, r2
 80061a6:	4798      	blx	r3
 80061a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	2202      	movs	r2, #2
 80061b0:	701a      	strb	r2, [r3, #0]
      break;
 80061b2:	e0f2      	b.n	800639a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	885b      	ldrh	r3, [r3, #2]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	f200 80ac 	bhi.w	8006318 <USBD_GetDescriptor+0x204>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <USBD_GetDescriptor+0xb4>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061e1 	.word	0x080061e1
 80061cc:	08006215 	.word	0x08006215
 80061d0:	08006249 	.word	0x08006249
 80061d4:	0800627d 	.word	0x0800627d
 80061d8:	080062b1 	.word	0x080062b1
 80061dc:	080062e5 	.word	0x080062e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7c12      	ldrb	r2, [r2, #16]
 80061f8:	f107 0108 	add.w	r1, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006202:	e091      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 facb 	bl	80067a2 <USBD_CtlError>
            err++;
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	3301      	adds	r3, #1
 8006210:	72fb      	strb	r3, [r7, #11]
          break;
 8006212:	e089      	b.n	8006328 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	7c12      	ldrb	r2, [r2, #16]
 800622c:	f107 0108 	add.w	r1, r7, #8
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
 8006234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006236:	e077      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fab1 	bl	80067a2 <USBD_CtlError>
            err++;
 8006240:	7afb      	ldrb	r3, [r7, #11]
 8006242:	3301      	adds	r3, #1
 8006244:	72fb      	strb	r3, [r7, #11]
          break;
 8006246:	e06f      	b.n	8006328 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	7c12      	ldrb	r2, [r2, #16]
 8006260:	f107 0108 	add.w	r1, r7, #8
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
 8006268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800626a:	e05d      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa97 	bl	80067a2 <USBD_CtlError>
            err++;
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	3301      	adds	r3, #1
 8006278:	72fb      	strb	r3, [r7, #11]
          break;
 800627a:	e055      	b.n	8006328 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	7c12      	ldrb	r2, [r2, #16]
 8006294:	f107 0108 	add.w	r1, r7, #8
 8006298:	4610      	mov	r0, r2
 800629a:	4798      	blx	r3
 800629c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800629e:	e043      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa7d 	bl	80067a2 <USBD_CtlError>
            err++;
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	3301      	adds	r3, #1
 80062ac:	72fb      	strb	r3, [r7, #11]
          break;
 80062ae:	e03b      	b.n	8006328 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062d2:	e029      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa63 	bl	80067a2 <USBD_CtlError>
            err++;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	3301      	adds	r3, #1
 80062e0:	72fb      	strb	r3, [r7, #11]
          break;
 80062e2:	e021      	b.n	8006328 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	7c12      	ldrb	r2, [r2, #16]
 80062fc:	f107 0108 	add.w	r1, r7, #8
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006306:	e00f      	b.n	8006328 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fa49 	bl	80067a2 <USBD_CtlError>
            err++;
 8006310:	7afb      	ldrb	r3, [r7, #11]
 8006312:	3301      	adds	r3, #1
 8006314:	72fb      	strb	r3, [r7, #11]
          break;
 8006316:	e007      	b.n	8006328 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa41 	bl	80067a2 <USBD_CtlError>
          err++;
 8006320:	7afb      	ldrb	r3, [r7, #11]
 8006322:	3301      	adds	r3, #1
 8006324:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006326:	bf00      	nop
      }
      break;
 8006328:	e037      	b.n	800639a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7c1b      	ldrb	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	f107 0208 	add.w	r2, r7, #8
 800633e:	4610      	mov	r0, r2
 8006340:	4798      	blx	r3
 8006342:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006344:	e029      	b.n	800639a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa2a 	bl	80067a2 <USBD_CtlError>
        err++;
 800634e:	7afb      	ldrb	r3, [r7, #11]
 8006350:	3301      	adds	r3, #1
 8006352:	72fb      	strb	r3, [r7, #11]
      break;
 8006354:	e021      	b.n	800639a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7c1b      	ldrb	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f107 0208 	add.w	r2, r7, #8
 800636a:	4610      	mov	r0, r2
 800636c:	4798      	blx	r3
 800636e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	2207      	movs	r2, #7
 8006376:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006378:	e00f      	b.n	800639a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa10 	bl	80067a2 <USBD_CtlError>
        err++;
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	3301      	adds	r3, #1
 8006386:	72fb      	strb	r3, [r7, #11]
      break;
 8006388:	e007      	b.n	800639a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fa08 	bl	80067a2 <USBD_CtlError>
      err++;
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	3301      	adds	r3, #1
 8006396:	72fb      	strb	r3, [r7, #11]
      break;
 8006398:	bf00      	nop
  }

  if (err != 0U)
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11e      	bne.n	80063de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00e      	beq.n	80063cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	88da      	ldrh	r2, [r3, #6]
 80063b2:	893b      	ldrh	r3, [r7, #8]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf28      	it	cs
 80063b8:	4613      	movcs	r3, r2
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	461a      	mov	r2, r3
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fa5d 	bl	8006884 <USBD_CtlSendData>
 80063ca:	e009      	b.n	80063e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9e7 	bl	80067a2 <USBD_CtlError>
 80063d4:	e004      	b.n	80063e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 faae 	bl	8006938 <USBD_CtlSendStatus>
 80063dc:	e000      	b.n	80063e0 <USBD_GetDescriptor+0x2cc>
    return;
 80063de:	bf00      	nop
  }
}
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	889b      	ldrh	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d131      	bne.n	800645e <USBD_SetAddress+0x76>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88db      	ldrh	r3, [r3, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d12d      	bne.n	800645e <USBD_SetAddress+0x76>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	2b7f      	cmp	r3, #127	; 0x7f
 8006408:	d829      	bhi.n	800645e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	885b      	ldrh	r3, [r3, #2]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006414:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b03      	cmp	r3, #3
 8006420:	d104      	bne.n	800642c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9bc 	bl	80067a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	e01d      	b.n	8006468 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ff19 	bl	8007270 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa7a 	bl	8006938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	e009      	b.n	8006468 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645c:	e004      	b.n	8006468 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f99e 	bl	80067a2 <USBD_CtlError>
  }
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	4b4e      	ldr	r3, [pc, #312]	; (80065c0 <USBD_SetConfig+0x150>)
 8006486:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006488:	4b4d      	ldr	r3, [pc, #308]	; (80065c0 <USBD_SetConfig+0x150>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d905      	bls.n	800649c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f985 	bl	80067a2 <USBD_CtlError>
    return USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	e08c      	b.n	80065b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d002      	beq.n	80064ae <USBD_SetConfig+0x3e>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d029      	beq.n	8006500 <USBD_SetConfig+0x90>
 80064ac:	e075      	b.n	800659a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <USBD_SetConfig+0x150>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d020      	beq.n	80064f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064b6:	4b42      	ldr	r3, [pc, #264]	; (80065c0 <USBD_SetConfig+0x150>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064c0:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <USBD_SetConfig+0x150>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe ffe7 	bl	800549a <USBD_SetClassConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f962 	bl	80067a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064e6:	e065      	b.n	80065b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa25 	bl	8006938 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064f6:	e05d      	b.n	80065b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa1d 	bl	8006938 <USBD_CtlSendStatus>
      break;
 80064fe:	e059      	b.n	80065b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <USBD_SetConfig+0x150>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d112      	bne.n	800652e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <USBD_SetConfig+0x150>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800651a:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <USBD_SetConfig+0x150>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fe ffd6 	bl	80054d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa06 	bl	8006938 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800652c:	e042      	b.n	80065b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <USBD_SetConfig+0x150>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d02a      	beq.n	8006592 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fe ffc4 	bl	80054d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <USBD_SetConfig+0x150>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <USBD_SetConfig+0x150>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fe ff9d 	bl	800549a <USBD_SetClassConfig>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00f      	beq.n	800658a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f918 	bl	80067a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe ffa9 	bl	80054d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006588:	e014      	b.n	80065b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9d4 	bl	8006938 <USBD_CtlSendStatus>
      break;
 8006590:	e010      	b.n	80065b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9d0 	bl	8006938 <USBD_CtlSendStatus>
      break;
 8006598:	e00c      	b.n	80065b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f900 	bl	80067a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a2:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <USBD_SetConfig+0x150>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fe ff92 	bl	80054d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	73fb      	strb	r3, [r7, #15]
      break;
 80065b2:	bf00      	nop
  }

  return ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000174 	.word	0x20000174

080065c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d004      	beq.n	80065e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8e2 	bl	80067a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065de:	e023      	b.n	8006628 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	dc02      	bgt.n	80065f2 <USBD_GetConfig+0x2e>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dc03      	bgt.n	80065f8 <USBD_GetConfig+0x34>
 80065f0:	e015      	b.n	800661e <USBD_GetConfig+0x5a>
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d00b      	beq.n	800660e <USBD_GetConfig+0x4a>
 80065f6:	e012      	b.n	800661e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3308      	adds	r3, #8
 8006602:	2201      	movs	r2, #1
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f93c 	bl	8006884 <USBD_CtlSendData>
        break;
 800660c:	e00c      	b.n	8006628 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	2201      	movs	r2, #1
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f934 	bl	8006884 <USBD_CtlSendData>
        break;
 800661c:	e004      	b.n	8006628 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8be 	bl	80067a2 <USBD_CtlError>
        break;
 8006626:	bf00      	nop
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006640:	b2db      	uxtb	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	2b02      	cmp	r3, #2
 8006646:	d81e      	bhi.n	8006686 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d004      	beq.n	800665a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8a5 	bl	80067a2 <USBD_CtlError>
        break;
 8006658:	e01a      	b.n	8006690 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 0202 	orr.w	r2, r3, #2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	330c      	adds	r3, #12
 800667a:	2202      	movs	r2, #2
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f900 	bl	8006884 <USBD_CtlSendData>
      break;
 8006684:	e004      	b.n	8006690 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f88a 	bl	80067a2 <USBD_CtlError>
      break;
 800668e:	bf00      	nop
  }
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	885b      	ldrh	r3, [r3, #2]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d107      	bne.n	80066ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f940 	bl	8006938 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80066b8:	e013      	b.n	80066e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d10b      	bne.n	80066da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	889b      	ldrh	r3, [r3, #4]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f930 	bl	8006938 <USBD_CtlSendStatus>
}
 80066d8:	e003      	b.n	80066e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f860 	bl	80067a2 <USBD_CtlError>
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d80b      	bhi.n	800671a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d10c      	bne.n	8006724 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f910 	bl	8006938 <USBD_CtlSendStatus>
      }
      break;
 8006718:	e004      	b.n	8006724 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f840 	bl	80067a2 <USBD_CtlError>
      break;
 8006722:	e000      	b.n	8006726 <USBD_ClrFeature+0x3c>
      break;
 8006724:	bf00      	nop
  }
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff fa41 	bl	8005be0 <SWAPBYTE>
 800675e:	4603      	mov	r3, r0
 8006760:	461a      	mov	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fa34 	bl	8005be0 <SWAPBYTE>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff fa27 	bl	8005be0 <SWAPBYTE>
 8006792:	4603      	mov	r3, r0
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	80da      	strh	r2, [r3, #6]
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fcf4 	bl	800719c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fcf0 	bl	800719c <USBD_LL_StallEP>
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d036      	beq.n	8006848 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067de:	6938      	ldr	r0, [r7, #16]
 80067e0:	f000 f836 	bl	8006850 <USBD_GetLen>
 80067e4:	4603      	mov	r3, r0
 80067e6:	3301      	adds	r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4413      	add	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	3301      	adds	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4413      	add	r3, r2
 800680a:	2203      	movs	r2, #3
 800680c:	701a      	strb	r2, [r3, #0]
  idx++;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	3301      	adds	r3, #1
 8006812:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006814:	e013      	b.n	800683e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4413      	add	r3, r2
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3301      	adds	r3, #1
 8006826:	613b      	str	r3, [r7, #16]
    idx++;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	3301      	adds	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	4413      	add	r3, r2
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
    idx++;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	3301      	adds	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e7      	bne.n	8006816 <USBD_GetString+0x52>
 8006846:	e000      	b.n	800684a <USBD_GetString+0x86>
    return;
 8006848:	bf00      	nop
  }
}
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006860:	e005      	b.n	800686e <USBD_GetLen+0x1e>
  {
    len++;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	3301      	adds	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3301      	adds	r3, #1
 800686c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f5      	bne.n	8006862 <USBD_GetLen+0x12>
  }

  return len;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	2100      	movs	r1, #0
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fcff 	bl	80072ae <USBD_LL_Transmit>

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	2100      	movs	r1, #0
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fcee 	bl	80072ae <USBD_LL_Transmit>

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2203      	movs	r2, #3
 80068ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	2100      	movs	r1, #0
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fcf2 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	2100      	movs	r1, #0
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fce1 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006948:	2300      	movs	r3, #0
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fcad 	bl	80072ae <USBD_LL_Transmit>

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2205      	movs	r2, #5
 800696a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fcbb 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006988:	2200      	movs	r2, #0
 800698a:	4912      	ldr	r1, [pc, #72]	; (80069d4 <MX_USB_DEVICE_Init+0x50>)
 800698c:	4812      	ldr	r0, [pc, #72]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 800698e:	f7fe fd07 	bl	80053a0 <USBD_Init>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006998:	f7fa f80c 	bl	80009b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800699c:	490f      	ldr	r1, [pc, #60]	; (80069dc <MX_USB_DEVICE_Init+0x58>)
 800699e:	480e      	ldr	r0, [pc, #56]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069a0:	f7fe fd2e 	bl	8005400 <USBD_RegisterClass>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069aa:	f7fa f803 	bl	80009b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069ae:	490c      	ldr	r1, [pc, #48]	; (80069e0 <MX_USB_DEVICE_Init+0x5c>)
 80069b0:	4809      	ldr	r0, [pc, #36]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069b2:	f7fe fc1f 	bl	80051f4 <USBD_CDC_RegisterInterface>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069bc:	f7f9 fffa 	bl	80009b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <MX_USB_DEVICE_Init+0x54>)
 80069c2:	f7fe fd53 	bl	800546c <USBD_Start>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069cc:	f7f9 fff2 	bl	80009b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	200000ac 	.word	0x200000ac
 80069d8:	20000178 	.word	0x20000178
 80069dc:	20000018 	.word	0x20000018
 80069e0:	20000098 	.word	0x20000098

080069e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069e8:	2200      	movs	r2, #0
 80069ea:	4905      	ldr	r1, [pc, #20]	; (8006a00 <CDC_Init_FS+0x1c>)
 80069ec:	4805      	ldr	r0, [pc, #20]	; (8006a04 <CDC_Init_FS+0x20>)
 80069ee:	f7fe fc1b 	bl	8005228 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069f2:	4905      	ldr	r1, [pc, #20]	; (8006a08 <CDC_Init_FS+0x24>)
 80069f4:	4803      	ldr	r0, [pc, #12]	; (8006a04 <CDC_Init_FS+0x20>)
 80069f6:	f7fe fc39 	bl	800526c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80069fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000c54 	.word	0x20000c54
 8006a04:	20000178 	.word	0x20000178
 8006a08:	20000454 	.word	0x20000454

08006a0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b23      	cmp	r3, #35	; 0x23
 8006a30:	d84a      	bhi.n	8006ac8 <CDC_Control_FS+0xac>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <CDC_Control_FS+0x1c>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006ac9 	.word	0x08006ac9
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006ac9 	.word	0x08006ac9
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006ac9 	.word	0x08006ac9
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ac9 	.word	0x08006ac9
 8006a54:	08006ac9 	.word	0x08006ac9
 8006a58:	08006ac9 	.word	0x08006ac9
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006ac9 	.word	0x08006ac9
 8006a68:	08006ac9 	.word	0x08006ac9
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006ac9 	.word	0x08006ac9
 8006a80:	08006ac9 	.word	0x08006ac9
 8006a84:	08006ac9 	.word	0x08006ac9
 8006a88:	08006ac9 	.word	0x08006ac9
 8006a8c:	08006ac9 	.word	0x08006ac9
 8006a90:	08006ac9 	.word	0x08006ac9
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006ac9 	.word	0x08006ac9
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ac9 	.word	0x08006ac9
 8006ab4:	08006ac9 	.word	0x08006ac9
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006ac9 	.word	0x08006ac9
 8006ac0:	08006ac9 	.word	0x08006ac9
 8006ac4:	08006ac9 	.word	0x08006ac9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ac8:	bf00      	nop
  }

  return (USBD_OK);
 8006aca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4808      	ldr	r0, [pc, #32]	; (8006b08 <CDC_Receive_FS+0x30>)
 8006ae6:	f7fe fbc1 	bl	800526c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006aea:	4807      	ldr	r0, [pc, #28]	; (8006b08 <CDC_Receive_FS+0x30>)
 8006aec:	f7fe fc22 	bl	8005334 <USBD_CDC_ReceivePacket>

  // Because CDC_Receive_FS is static, we can't call it in main
  // Therefore, we pass the buffer and length from CDC_Receive_FS to the below callback function
  // Because this function has the 'weak' attribute, we can redefine it in our main.c to handle received data
  CDC_HandleReceive(Buf, Len[0]);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7f9 ff3c 	bl	8000974 <CDC_HandleReceive>
  return (USBD_OK);
 8006afc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000178 	.word	0x20000178

08006b0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <CDC_Transmit_FS+0x48>)
 8006b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e00b      	b.n	8006b4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4806      	ldr	r0, [pc, #24]	; (8006b54 <CDC_Transmit_FS+0x48>)
 8006b3a:	f7fe fb75 	bl	8005228 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b3e:	4805      	ldr	r0, [pc, #20]	; (8006b54 <CDC_Transmit_FS+0x48>)
 8006b40:	f7fe fbb2 	bl	80052a8 <USBD_CDC_TransmitPacket>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000178 	.word	0x20000178

08006b58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	6039      	str	r1, [r7, #0]
 8006b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2212      	movs	r2, #18
 8006b8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	200000c8 	.word	0x200000c8

08006ba0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bb2:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	200000dc 	.word	0x200000dc

08006bc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4907      	ldr	r1, [pc, #28]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bda:	4808      	ldr	r0, [pc, #32]	; (8006bfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bdc:	f7ff fdf2 	bl	80067c4 <USBD_GetString>
 8006be0:	e004      	b.n	8006bec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4904      	ldr	r1, [pc, #16]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006be6:	4805      	ldr	r0, [pc, #20]	; (8006bfc <USBD_FS_ProductStrDescriptor+0x38>)
 8006be8:	f7ff fdec 	bl	80067c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20001454 	.word	0x20001454
 8006bfc:	080074b4 	.word	0x080074b4

08006c00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	4904      	ldr	r1, [pc, #16]	; (8006c20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c10:	4804      	ldr	r0, [pc, #16]	; (8006c24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c12:	f7ff fdd7 	bl	80067c4 <USBD_GetString>
  return USBD_StrDesc;
 8006c16:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20001454 	.word	0x20001454
 8006c24:	080074cc 	.word	0x080074cc

08006c28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	221a      	movs	r2, #26
 8006c38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c3a:	f000 f843 	bl	8006cc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c3e:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	200000e0 	.word	0x200000e0

08006c4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4907      	ldr	r1, [pc, #28]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c62:	4808      	ldr	r0, [pc, #32]	; (8006c84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c64:	f7ff fdae 	bl	80067c4 <USBD_GetString>
 8006c68:	e004      	b.n	8006c74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4904      	ldr	r1, [pc, #16]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c6e:	4805      	ldr	r0, [pc, #20]	; (8006c84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c70:	f7ff fda8 	bl	80067c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c74:	4b02      	ldr	r3, [pc, #8]	; (8006c80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20001454 	.word	0x20001454
 8006c84:	080074e0 	.word	0x080074e0

08006c88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4907      	ldr	r1, [pc, #28]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c9e:	4808      	ldr	r0, [pc, #32]	; (8006cc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ca0:	f7ff fd90 	bl	80067c4 <USBD_GetString>
 8006ca4:	e004      	b.n	8006cb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4904      	ldr	r1, [pc, #16]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006caa:	4805      	ldr	r0, [pc, #20]	; (8006cc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cac:	f7ff fd8a 	bl	80067c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20001454 	.word	0x20001454
 8006cc0:	080074ec 	.word	0x080074ec

08006cc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <Get_SerialNum+0x44>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <Get_SerialNum+0x48>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <Get_SerialNum+0x4c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cea:	2208      	movs	r2, #8
 8006cec:	4909      	ldr	r1, [pc, #36]	; (8006d14 <Get_SerialNum+0x50>)
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f814 	bl	8006d1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	4908      	ldr	r1, [pc, #32]	; (8006d18 <Get_SerialNum+0x54>)
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f000 f80f 	bl	8006d1c <IntToUnicode>
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	1fff7a10 	.word	0x1fff7a10
 8006d0c:	1fff7a14 	.word	0x1fff7a14
 8006d10:	1fff7a18 	.word	0x1fff7a18
 8006d14:	200000e2 	.word	0x200000e2
 8006d18:	200000f2 	.word	0x200000f2

08006d1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
 8006d32:	e027      	b.n	8006d84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d80b      	bhi.n	8006d54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	0f1b      	lsrs	r3, r3, #28
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4619      	mov	r1, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3230      	adds	r2, #48	; 0x30
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e00a      	b.n	8006d6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0f1b      	lsrs	r3, r3, #28
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	440b      	add	r3, r1
 8006d64:	3237      	adds	r2, #55	; 0x37
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	3301      	adds	r3, #1
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	3301      	adds	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
 8006d84:	7dfa      	ldrb	r2, [r7, #23]
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3d3      	bcc.n	8006d34 <IntToUnicode+0x18>
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dbc:	d147      	bne.n	8006e4e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4619      	mov	r1, r3
 8006dee:	481b      	ldr	r0, [pc, #108]	; (8006e5c <HAL_PCD_MspInit+0xc0>)
 8006df0:	f7fa f86e 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006df4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e06:	230a      	movs	r3, #10
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0a:	f107 0314 	add.w	r3, r7, #20
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <HAL_PCD_MspInit+0xc0>)
 8006e12:	f7fa f85d 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	6353      	str	r3, [r2, #52]	; 0x34
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	4a0b      	ldr	r2, [pc, #44]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e30:	6453      	str	r3, [r2, #68]	; 0x44
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_PCD_MspInit+0xbc>)
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	2043      	movs	r0, #67	; 0x43
 8006e44:	f7fa f80d 	bl	8000e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e48:	2043      	movs	r0, #67	; 0x43
 8006e4a:	f7fa f826 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40020000 	.word	0x40020000

08006e60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7fe fb45 	bl	8005506 <USBD_LL_SetupStage>
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	4619      	mov	r1, r3
 8006eae:	f7fe fb7f 	bl	80055b0 <USBD_LL_DataOutStage>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	334c      	adds	r3, #76	; 0x4c
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f7fe fc18 	bl	8005716 <USBD_LL_DataInStage>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fd4c 	bl	800599a <USBD_LL_SOF>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e008      	b.n	8006f36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d102      	bne.n	8006f32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
 8006f30:	e001      	b.n	8006f36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f32:	f7f9 fd3f 	bl	80009b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fcec 	bl	800591e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fc94 	bl	800587a <USBD_LL_Reset>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fce7 	bl	800593e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <HAL_PCD_SuspendCallback+0x48>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <HAL_PCD_SuspendCallback+0x48>)
 8006f96:	f043 0306 	orr.w	r3, r3, #6
 8006f9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fcd7 	bl	800596a <USBD_LL_Resume>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fd2f 	bl	8005a3e <USBD_LL_IsoOUTIncomplete>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fceb 	bl	80059da <USBD_LL_IsoINIncomplete>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fd41 	bl	8005aa2 <USBD_LL_DevConnected>
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd3e 	bl	8005ab8 <USBD_LL_DevDisconnected>
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d13c      	bne.n	80070ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007054:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <USBD_LL_Init+0x94>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <USBD_LL_Init+0x94>)
 8007060:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007064:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <USBD_LL_Init+0x94>)
 8007066:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800706a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <USBD_LL_Init+0x94>)
 800706e:	2204      	movs	r2, #4
 8007070:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007072:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <USBD_LL_Init+0x94>)
 8007074:	2202      	movs	r2, #2
 8007076:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <USBD_LL_Init+0x94>)
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800707e:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <USBD_LL_Init+0x94>)
 8007080:	2202      	movs	r2, #2
 8007082:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007084:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <USBD_LL_Init+0x94>)
 8007086:	2200      	movs	r2, #0
 8007088:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <USBD_LL_Init+0x94>)
 800708c:	2200      	movs	r2, #0
 800708e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007090:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <USBD_LL_Init+0x94>)
 8007092:	2200      	movs	r2, #0
 8007094:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <USBD_LL_Init+0x94>)
 8007098:	2201      	movs	r2, #1
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800709c:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <USBD_LL_Init+0x94>)
 800709e:	2200      	movs	r2, #0
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80070a2:	480d      	ldr	r0, [pc, #52]	; (80070d8 <USBD_LL_Init+0x94>)
 80070a4:	f7fa f8e3 	bl	800126e <HAL_PCD_Init>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80070ae:	f7f9 fc81 	bl	80009b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	4808      	ldr	r0, [pc, #32]	; (80070d8 <USBD_LL_Init+0x94>)
 80070b6:	f7fb fb3a 	bl	800272e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	2100      	movs	r1, #0
 80070be:	4806      	ldr	r0, [pc, #24]	; (80070d8 <USBD_LL_Init+0x94>)
 80070c0:	f7fb faee 	bl	80026a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80070c4:	2280      	movs	r2, #128	; 0x80
 80070c6:	2101      	movs	r1, #1
 80070c8:	4803      	ldr	r0, [pc, #12]	; (80070d8 <USBD_LL_Init+0x94>)
 80070ca:	f7fb fae9 	bl	80026a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20001654 	.word	0x20001654

080070dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fa f9d8 	bl	80014a8 <HAL_PCD_Start>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f942 	bl	8007388 <USBD_Get_USB_Status>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007108:	7bbb      	ldrb	r3, [r7, #14]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	461a      	mov	r2, r3
 8007120:	4603      	mov	r3, r0
 8007122:	70fb      	strb	r3, [r7, #3]
 8007124:	460b      	mov	r3, r1
 8007126:	70bb      	strb	r3, [r7, #2]
 8007128:	4613      	mov	r3, r2
 800712a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800713a:	78bb      	ldrb	r3, [r7, #2]
 800713c:	883a      	ldrh	r2, [r7, #0]
 800713e:	78f9      	ldrb	r1, [r7, #3]
 8007140:	f7fa fea9 	bl	8001e96 <HAL_PCD_EP_Open>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f91c 	bl	8007388 <USBD_Get_USB_Status>
 8007150:	4603      	mov	r3, r0
 8007152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007154:	7bbb      	ldrb	r3, [r7, #14]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fa fef2 	bl	8001f66 <HAL_PCD_EP_Close>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f8fd 	bl	8007388 <USBD_Get_USB_Status>
 800718e:	4603      	mov	r3, r0
 8007190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007192:	7bbb      	ldrb	r3, [r7, #14]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fa ffca 	bl	8002154 <HAL_PCD_EP_SetStall>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f8de 	bl	8007388 <USBD_Get_USB_Status>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fb f80f 	bl	800221c <HAL_PCD_EP_ClrStall>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 f8bf 	bl	8007388 <USBD_Get_USB_Status>
 800720a:	4603      	mov	r3, r0
 800720c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800720e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800722a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800722c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da0b      	bge.n	800724c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	4613      	mov	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	333e      	adds	r3, #62	; 0x3e
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	e00b      	b.n	8007264 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007262:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f7fa fddc 	bl	8001e4c <HAL_PCD_SetAddress>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f874 	bl	8007388 <USBD_Get_USB_Status>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b086      	sub	sp, #24
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	460b      	mov	r3, r1
 80072bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072cc:	7af9      	ldrb	r1, [r7, #11]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	f7fa fef5 	bl	80020c0 <HAL_PCD_EP_Transmit>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f853 	bl	8007388 <USBD_Get_USB_Status>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	460b      	mov	r3, r1
 80072fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800730e:	7af9      	ldrb	r1, [r7, #11]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	f7fa fe71 	bl	8001ffa <HAL_PCD_EP_Receive>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f832 	bl	8007388 <USBD_Get_USB_Status>
 8007324:	4603      	mov	r3, r0
 8007326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007328:	7dbb      	ldrb	r3, [r7, #22]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	4611      	mov	r1, r2
 8007348:	4618      	mov	r0, r3
 800734a:	f7fa fea1 	bl	8002090 <HAL_PCD_EP_GetRxCount>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007360:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_static_malloc+0x18>)
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20001b60 	.word	0x20001b60

08007374 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d817      	bhi.n	80073cc <USBD_Get_USB_Status+0x44>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <USBD_Get_USB_Status+0x1c>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073bb 	.word	0x080073bb
 80073ac:	080073c1 	.word	0x080073c1
 80073b0:	080073c7 	.word	0x080073c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
    break;
 80073b8:	e00b      	b.n	80073d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ba:	2303      	movs	r3, #3
 80073bc:	73fb      	strb	r3, [r7, #15]
    break;
 80073be:	e008      	b.n	80073d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
    break;
 80073c4:	e005      	b.n	80073d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	73fb      	strb	r3, [r7, #15]
    break;
 80073ca:	e002      	b.n	80073d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	73fb      	strb	r3, [r7, #15]
    break;
 80073d0:	bf00      	nop
  }
  return usb_status;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <__libc_init_array>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4d0d      	ldr	r5, [pc, #52]	; (8007418 <__libc_init_array+0x38>)
 80073e4:	4c0d      	ldr	r4, [pc, #52]	; (800741c <__libc_init_array+0x3c>)
 80073e6:	1b64      	subs	r4, r4, r5
 80073e8:	10a4      	asrs	r4, r4, #2
 80073ea:	2600      	movs	r6, #0
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	d109      	bne.n	8007404 <__libc_init_array+0x24>
 80073f0:	4d0b      	ldr	r5, [pc, #44]	; (8007420 <__libc_init_array+0x40>)
 80073f2:	4c0c      	ldr	r4, [pc, #48]	; (8007424 <__libc_init_array+0x44>)
 80073f4:	f000 f820 	bl	8007438 <_init>
 80073f8:	1b64      	subs	r4, r4, r5
 80073fa:	10a4      	asrs	r4, r4, #2
 80073fc:	2600      	movs	r6, #0
 80073fe:	42a6      	cmp	r6, r4
 8007400:	d105      	bne.n	800740e <__libc_init_array+0x2e>
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	f855 3b04 	ldr.w	r3, [r5], #4
 8007408:	4798      	blx	r3
 800740a:	3601      	adds	r6, #1
 800740c:	e7ee      	b.n	80073ec <__libc_init_array+0xc>
 800740e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007412:	4798      	blx	r3
 8007414:	3601      	adds	r6, #1
 8007416:	e7f2      	b.n	80073fe <__libc_init_array+0x1e>
 8007418:	08007514 	.word	0x08007514
 800741c:	08007514 	.word	0x08007514
 8007420:	08007514 	.word	0x08007514
 8007424:	08007518 	.word	0x08007518

08007428 <memset>:
 8007428:	4402      	add	r2, r0
 800742a:	4603      	mov	r3, r0
 800742c:	4293      	cmp	r3, r2
 800742e:	d100      	bne.n	8007432 <memset+0xa>
 8007430:	4770      	bx	lr
 8007432:	f803 1b01 	strb.w	r1, [r3], #1
 8007436:	e7f9      	b.n	800742c <memset+0x4>

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
